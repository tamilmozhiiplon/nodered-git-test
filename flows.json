[
    {
        "id": "51ccfe701a4cb3d7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "15844ce26ed2117d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4214241c687a7bca",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "835dffc2dea52a5f",
        "type": "tab",
        "label": "Flow 9",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b590a82e70d8c9a7",
        "type": "tab",
        "label": "Iyyermal-COMM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd23a9f29fb11070",
        "type": "tab",
        "label": "Flow 12",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a11a2520e91d968b",
        "type": "tab",
        "label": "Best Cotton EAE Day",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2e5580d30d5651eb",
        "type": "tab",
        "label": "test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bcbbcd5945eaace7",
        "type": "tab",
        "label": "Alarm",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05c8bc63a09a3cb4",
        "type": "tab",
        "label": "MG database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0fd935399108894e",
        "type": "tab",
        "label": "SDF",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4504d6f21ce3ab7a",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5680b2bd775bca8a",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9eeef4390ef47f7e",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "feca275c6d5c7579",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1d2e14befd69b6a2",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c608052aa2c1b2b3",
        "type": "tab",
        "label": "Flow 8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "19f724811cd1f199",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influx",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://mgleurope.influx.svc.cluster.local",
        "rejectUnauthorized": false
    },
    {
        "id": "f1846e85c6da7e54",
        "type": "ui_group",
        "name": "senec",
        "tab": "88a20c9420b5fee2",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e52f5bf728d79e90",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "1f43f1a7d02390ea",
        "influxdbVersion": "2.0",
        "url": "http://192.168.5.186:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "88a20c9420b5fee2",
        "type": "ui_tab",
        "name": "Scrapped",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1f43f1a7d02390ea",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "52b8c3a4a1aade9e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4a6a4ac55c60a4cc",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "mydb",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://influx-europe.iplon.co.in",
        "rejectUnauthorized": false
    },
    {
        "id": "c476b4ae71908d52",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "TATA_CCRA",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "067d270fb6080ac1",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "TEST_TM",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "c563e3c6072c32be",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "c1b5f1601e8e836e",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "TATA_CCRA",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "52afa59f5805f92f",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "Report",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://192.168.5.125:30086",
        "rejectUnauthorized": true
    },
    {
        "id": "c006a6cbdf4a6746",
        "type": "influxdb",
        "hostname": "http://34.93.63.75",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://influx-asia4.iplon.co.in/",
        "rejectUnauthorized": true
    },
    {
        "id": "43e510db25fb8b80",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "TATA_CCRA",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "aa89511df3ed4ecd",
        "type": "influxdb",
        "hostname": "192.168.5.125",
        "port": "30086",
        "protocol": "http",
        "database": "TEST_TM",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "dd04d92d3d5b3211",
        "type": "influxdb",
        "hostname": "http://34.93.63.75",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "techniquesolar",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://influx-asia4.iplon.co.in/",
        "rejectUnauthorized": false
    },
    {
        "id": "3bca187f56a227bf",
        "type": "influxdb",
        "hostname": "iplon-pvindia.com",
        "port": "30086",
        "protocol": "http",
        "database": "EDC",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "705b30eaab2edcd3",
        "type": "influxdb",
        "hostname": "iplon-pvindia.com",
        "port": "30086",
        "protocol": "http",
        "database": "SIRICILLA_30MW",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "ccc431de9f0d8ff2",
        "type": "influxdb",
        "hostname": "iplon-pvindia.com",
        "port": "30086",
        "protocol": "http",
        "database": "EDC",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "a26a60a1b0efa0e4",
        "type": "influxdb",
        "hostname": "iplon-pvindia.com",
        "port": "30086",
        "protocol": "http",
        "database": "EDC",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "7c33df7798517679",
        "type": "influxdb",
        "hostname": "iplon-pvindia.com",
        "port": "30086",
        "protocol": "http",
        "database": "EDC",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "d69f1381f18dd281",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "1f43f1a7d02390ea",
        "influxdbVersion": "2.0",
        "url": "https://influx-lulasia.iplon.co.in/",
        "rejectUnauthorized": true
    },
    {
        "id": "d9624eedb8c800e6",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "1f43f1a7d02390ea",
        "influxdbVersion": "2.0",
        "url": "https://influx-dev.iplon.co.in/",
        "rejectUnauthorized": true
    },
    {
        "id": "5d0b89a7c8341473",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "1f43f1a7d02390ea",
        "influxdbVersion": "2.0",
        "url": "https://influx-asia4.iplon.co.in/",
        "rejectUnauthorized": true
    },
    {
        "id": "8668db9f293347a2",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "mglasia",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "2.0",
        "url": "https://influx-asia4.iplon.co.in/",
        "rejectUnauthorized": false
    },
    {
        "id": "12e11b276c3bf4da",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "mglasia",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "2.0",
        "url": "https://influx-asia4.iplon.co.in/",
        "rejectUnauthorized": false
    },
    {
        "id": "56a5122efc519c42",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "1f43f1a7d02390ea",
        "influxdbVersion": "2.0",
        "url": "https://influx-lulasia.iplon.co.in/",
        "rejectUnauthorized": true
    },
    {
        "id": "9b0943aea6c60815",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "c563e3c6072c32be",
        "influxdbVersion": "2.0",
        "url": "https://influx-lulasia.iplon.co.in/",
        "rejectUnauthorized": false
    },
    {
        "id": "5b3dccc565744020",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "localhost",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "cb135bc2.cc3d9",
        "type": "ui_tab",
        "name": "Anomaly",
        "icon": "dashboard",
        "order": "1"
    },
    {
        "id": "8a97464cc635df54",
        "type": "ui_group",
        "name": "test",
        "tab": "cb135bc2.cc3d9",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3ad2bc4a7ed3c9a3",
        "type": "ui_group",
        "name": "Default",
        "tab": "ea338e93755239c0",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": true,
        "className": ""
    },
    {
        "id": "ea338e93755239c0",
        "type": "ui_tab",
        "name": "Plant Spec",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d5e64a38cbae0852",
        "type": "ui_group",
        "name": "Checklist_Form",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "835b57b122cf1501",
        "type": "ui_group",
        "name": "Plant_Details",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cd03b663e88509d5",
        "type": "postgresdb",
        "hostname": "localhost",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "796fe3168ff8e092",
        "type": "ui_group",
        "name": "File upload",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2321a78d592df88e",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "iplon321",
        "passwordFieldType": "str"
    },
    {
        "id": "8a968a0493177dfc",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "34.93.139.137",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "062a5865e5f14823",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "ipostgres.ipostgres-dev.svc.cluster.local",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "0d19dd6e830130a9",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "34.93.139.137",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "88096981.88df6",
        "type": "comment",
        "z": "15844ce26ed2117d",
        "name": "2) Request protected data",
        "info": "",
        "x": 170,
        "y": 280,
        "wires": []
    },
    {
        "id": "88142578.39a2c",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "bfde2608.8101b"
            ]
        ]
    },
    {
        "id": "1abbf619.6524ca",
        "type": "inject",
        "z": "15844ce26ed2117d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "88142578.39a2c"
            ]
        ]
    },
    {
        "id": "bfde2608.8101b",
        "type": "http request",
        "z": "15844ce26ed2117d",
        "name": "GET Plant",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.enerest.world/api/v1/iplon/visualization/plant/279a4298-8d26-11eb-a8be-001e6799788c/channels?dateFrom=2023-09-10&dateTo=2023-09-11&channelNames[]=Irradiation&channelNames[]=TempModule&componentIds[]=ba4d59c2-5076-11ee-88e3-960000a1d181",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "a8295408.7a4ea8"
            ]
        ]
    },
    {
        "id": "6023edcb.a62c0c",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "a8295408.7a4ea8",
        "type": "json",
        "z": "15844ce26ed2117d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 790,
        "y": 320,
        "wires": [
            [
                "6023edcb.a62c0c",
                "31a1784e60b2b19a"
            ]
        ]
    },
    {
        "id": "524b5cfcc1c1129b",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 460,
        "wires": [
            [
                "1718d97f389ae41a"
            ]
        ]
    },
    {
        "id": "c6fcb111a05d4d56",
        "type": "inject",
        "z": "15844ce26ed2117d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "524b5cfcc1c1129b"
            ]
        ]
    },
    {
        "id": "1718d97f389ae41a",
        "type": "http request",
        "z": "15844ce26ed2117d",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.enerest.world/api/v1/iplon/visualization/plant/279a4298-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=2023-09-02&dateTo=2023-09-02",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 460,
        "wires": [
            [
                "a78c696c7901dbcf"
            ]
        ]
    },
    {
        "id": "3836ac37f05ea7b1",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 480,
        "wires": []
    },
    {
        "id": "42d912b0b5e9292f",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "array of urls",
        "func": "msg.url=[\n    \n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/279a4298-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\"\n   /* \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\",\n    \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\" */\n\n]\nfor(var i = 0; i <msg.url.length; i++)\n{ \n    var url=msg.url[i]\n \n    var obj={\n    url\n}\n node.send(obj);\n}\n\nreturn null\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 760,
        "wires": [
            [
                "04fa9912910b3998"
            ]
        ]
    },
    {
        "id": "659813364ba7f914",
        "type": "http request",
        "z": "15844ce26ed2117d",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 760,
        "wires": [
            [
                "ad250404c06bcfb4"
            ]
        ]
    },
    {
        "id": "75100aeca690d368",
        "type": "inject",
        "z": "15844ce26ed2117d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "42d912b0b5e9292f"
            ]
        ]
    },
    {
        "id": "04fa9912910b3998",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "url and token",
        "func": "msg.url\nmsg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 760,
        "wires": [
            [
                "659813364ba7f914"
            ]
        ]
    },
    {
        "id": "bf3cce8cd6edd955",
        "type": "comment",
        "z": "15844ce26ed2117d",
        "name": "reading multiple url's",
        "info": "",
        "x": 190,
        "y": 700,
        "wires": []
    },
    {
        "id": "6040797a85f1d89b",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "iteraton",
        "func": "let plantObj\n\nplantObj = []\n//for(j =0; j < msg.payload.length;j++)\nfor (var i =0; i < msg.payload[0].timestamp.length;i++)\n{\nvar obj={\n    Timestamp:msg.payload[0].timestamp[i],\n\"Swelect API_Test_Plant\":msg.payload[0].swelect_api_values[i],\n\"Swelect SBI_Admin_Office_Vizag\":msg.payload[0].swelect_sbi[i],\n\"OMPL 2 MWp Floating Plant\":msg.payload[0].ompl_2MWp[i],\n}\n\nplantObj.push(obj)\n}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 820,
        "wires": [
            [
                "614ce874b13915fe"
            ]
        ]
    },
    {
        "id": "614ce874b13915fe",
        "type": "csv",
        "z": "15844ce26ed2117d",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 630,
        "y": 820,
        "wires": [
            [
                "163b1a6a76f8b566"
            ]
        ]
    },
    {
        "id": "bfc0f9a8f37dfdb3",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "object to array",
        "func": "\n let plantObj\n\nplantObj = []\n\n//for (i =0; i < msg.payload.length;i++)\n//{\n var swelect_api=msg.payload.Swelect_API_Test_Plant[0].dataPoints\n var keys=Object.keys(swelect_api);\n var swelect_api_values=Object.values(swelect_api);\n var swelect_sbi=Object.values(msg.payload.Swelect_SBI_Admin_Office_Vizag[0].dataPoints);\n var ompl_2MWp=Object.values(msg.payload.OMPL_2_MWp_Floating_Plant[0].dataPoints);\nvar obj={\n  timestamp:keys,\n       swelect_api_values,\n       swelect_sbi,\n       ompl_2MWp\n\n}\n\nplantObj.push(obj)\n//}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 820,
        "wires": [
            [
                "6040797a85f1d89b"
            ]
        ]
    },
    {
        "id": "163b1a6a76f8b566",
        "type": "file",
        "z": "15844ce26ed2117d",
        "name": "sdsapi.csv",
        "filename": "Downloads/sdsapi.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 820,
        "wires": [
            [
                "305c8a66d2f86186"
            ]
        ]
    },
    {
        "id": "a78c696c7901dbcf",
        "type": "json",
        "z": "15844ce26ed2117d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 770,
        "y": 460,
        "wires": [
            [
                "a62f1b5a357b1684"
            ]
        ]
    },
    {
        "id": "ff34b1d23d3b14a1",
        "type": "file in",
        "z": "15844ce26ed2117d",
        "name": "opcua.csv",
        "filename": "/usr/src/node-red/sdsapi.csv",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 900,
        "wires": [
            [
                "f7f88c84995ebdf4"
            ]
        ]
    },
    {
        "id": "ed1dd64ed33d5435",
        "type": "inject",
        "z": "15844ce26ed2117d",
        "name": "1) Insert nodeId items",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 900,
        "wires": [
            [
                "ff34b1d23d3b14a1"
            ]
        ]
    },
    {
        "id": "f7f88c84995ebdf4",
        "type": "csv",
        "z": "15844ce26ed2117d",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 550,
        "y": 900,
        "wires": [
            [
                "1026bb46b2b631bd"
            ]
        ]
    },
    {
        "id": "1026bb46b2b631bd",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 900,
        "wires": []
    },
    {
        "id": "bd9b5a552840651d",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch(msg.url){\n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/622a8cd2-e3d1-11eb-a4c6-960000a1d181/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.Swelect_API_Test_Plant = msg.payload;\n        msg = null;\n        break;\n        \n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/c18022f8-8d26-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.Swelect_SBI_Admin_Office_Vizag = msg.payload;\n        msg = null;\n        break;\n    \n    case \"https://api.enerest.world/api/v1/iplon/visualization/plant/350abfbe-8d27-11eb-a8be-001e6799788c/channels?channelNames[]=ProdPac&dateFrom=today&dateTo=today\":\n        context.data.OMPL_2_MWp_Floating_Plant = msg.payload;\n        msg = null;\n        break;\n}\nif(context.data.Swelect_API_Test_Plant != null && context.data.Swelect_SBI_Admin_Office_Vizag != null&& context.data.OMPL_2_MWp_Floating_Plant != null){\n    var data_combine = {\n        \"Swelect_API_Test_Plant\": context.data.Swelect_API_Test_Plant,\n        \"Swelect_SBI_Admin_Office_Vizag\":context.data.Swelect_SBI_Admin_Office_Vizag,\n        \"OMPL_2_MWp_Floating_Plant\":context.data.OMPL_2_MWp_Floating_Plant\n        }\n    context.data = null\n    return {payload: data_combine};\n}  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 760,
        "wires": [
            [
                "8af340ced481477d",
                "bfc0f9a8f37dfdb3"
            ]
        ]
    },
    {
        "id": "305c8a66d2f86186",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 820,
        "wires": []
    },
    {
        "id": "84f9b499e8f2fea7",
        "type": "http request",
        "z": "15844ce26ed2117d",
        "name": "solarlog",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://auth.enerest.world/auth/realms/quotaapi/protocol/openid-connect/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "0404ea46b874a22d"
            ]
        ]
    },
    {
        "id": "01d0ec41161fed26",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Content-Type' : 'application/x-www-form-urlencoded'\n};\n\n// client backend-service\n/*\nmsg.payload = {'grant_type':'password', \n               'client_id':'backend-service',\n               'username':'alice',\n               'password':'alice',\n               'client_secret':'secret'\n              };\n*/\n\nmsg.payload = {'grant_type':'client_credentials', \n               'client_id':'650fb07e-8a18-4907-a6c4-e4f432f52cb2',\n               'client_secret':'b7f327e7-60de-4cb5-909a-ee916445e143'\n              };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 200,
        "wires": [
            [
                "84f9b499e8f2fea7"
            ]
        ]
    },
    {
        "id": "f2edb8cbd5872dd2",
        "type": "comment",
        "z": "15844ce26ed2117d",
        "name": "1) Request bearer access token",
        "info": "",
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "469ac06808829b9d",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 200,
        "wires": []
    },
    {
        "id": "0404ea46b874a22d",
        "type": "json",
        "z": "15844ce26ed2117d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "a0dbeeb197c93509"
            ]
        ]
    },
    {
        "id": "a0dbeeb197c93509",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "set_bearer_token",
        "func": "flow.set(\"bearer_token\", \"Bearer \" + msg.payload.access_token);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [
            [
                "469ac06808829b9d"
            ]
        ]
    },
    {
        "id": "a1415ae4e77af73e",
        "type": "comment",
        "z": "15844ce26ed2117d",
        "name": "Bearer access token saved as flow variable",
        "info": "",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "e850a6fb225042a9",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "Build header and payload",
        "func": "msg.headers = {\n  'Authorization' : flow.get(\"bearer_token\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "a1c842f08cf55d94"
            ]
        ]
    },
    {
        "id": "c439a74fd51f9fc8",
        "type": "inject",
        "z": "15844ce26ed2117d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "e850a6fb225042a9"
            ]
        ]
    },
    {
        "id": "a1c842f08cf55d94",
        "type": "http request",
        "z": "15844ce26ed2117d",
        "name": "GET Production Today",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.enerest.world/api/v1/iplon/visualization/plant/279a4298-8d26-11eb-a8be-001e6799788c/year/2023/month/08?channelNames[]=ProdEtotal",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 600,
        "wires": [
            [
                "c817f7833ed0410c"
            ]
        ]
    },
    {
        "id": "dc39bd5351781bb8",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 600,
        "wires": []
    },
    {
        "id": "c817f7833ed0410c",
        "type": "json",
        "z": "15844ce26ed2117d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 750,
        "y": 600,
        "wires": [
            [
                "dc39bd5351781bb8"
            ]
        ]
    },
    {
        "id": "476d1e96df24d84e",
        "type": "comment",
        "z": "15844ce26ed2117d",
        "name": "reading multiple url's",
        "info": "",
        "x": 170,
        "y": 540,
        "wires": []
    },
    {
        "id": "8af340ced481477d",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 760,
        "wires": []
    },
    {
        "id": "2d408b0cb46ec5d4",
        "type": "csv",
        "z": "15844ce26ed2117d",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 1050,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3720cad21c133669",
        "type": "file",
        "z": "15844ce26ed2117d",
        "name": "sdsapi.csv",
        "filename": "Downloads/sdsapi.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 910,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "ad250404c06bcfb4",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 680,
        "wires": []
    },
    {
        "id": "a62f1b5a357b1684",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "Influx 2.0",
        "func": "//var url = msg.url\nvar id = msg.payload[0].id;\n\nvar dateUTC1 = new Date(msg.payload.TimeStamp).getTime();\nvar dateUTC = dateUTC1 + 'Z';\nvar obj = {};\nvar floatobj = {};\nvar stringobj = {};\n\nobj.payload = [{\n    measurement: \"v\",\n    fields: {\n      //  value: msg.payload.currentBatteryChargeDischarge,\n        value: msg.payload[0].dataPoints[\"2023-09-02T00:00:00+05:30\"],\n        text: \"0\",\n        qu: \"0\"\n    },\n    tags: {\n\n        b: \"Block\",\n        bd: \"Block\",\n        d: \"Device\",\n        dd: \"Device\",\n        dt: \"Device\",\n        f: \"BattDis\",\n        fd: \"PAC\",\n        h: \"Device\",\n        iid: id,\n        m: \"1\",\n        p: \"thermax\",\n        u: \"W\"\n    },\n    timestamp: dateUTC1\n}];\nnode.send(obj);\n\n/*obj.payload = [{\n    measurement: \"v\",\n    fields: {\n        value: msg.payload.currentPowerConsumption,\n        text: \"0\",\n        qu: \"0\"\n    },\n    tags: {\n\n        b: \"Block\",\n        bd: \"Block\",\n        d: \"Device\",\n        dd: \"Device\",\n        dt: \"Device\",\n        f: \"PowCon\",\n        fd: \"currentPowerConsumption\",\n        h: \"Device\",\n        iid: id,\n        m: \"1\",\n        p: \"ezee\",\n        u: \"W\"\n    },\n    timestamp: dateUTC1\n}];\nnode.send(obj);\n\nobj.payload = [{\n    measurement: \"v\",\n    fields: {\n        value: msg.payload.currentPvGeneration,\n        text: \"0\",\n        qu: \"0\"\n    },\n    tags: {\n\n        b: \"Block\",\n        bd: \"Block\",\n        d: \"Device\",\n        dd: \"Device\",\n        dt: \"Device\",\n        f: \"PVGen\",\n        fd: \"currentPvGeneration\",\n        h: \"Device\",\n        iid: id,\n        m: \"1\",\n        p: \"ezee\",\n        u: \"W\"\n    },\n    timestamp: dateUTC1\n}];\nnode.send(obj);\n\nif (Array.isArray(msg.payload.devices)) {\n    for (var i = 0; i < msg.payload.devices.length; i++) {\n        // Check the ID and set the device name accordingly\n        var device_id = msg.payload.devices[i]._id;\n        var deviceName;\n        if (device_id === \"635b5d2591548accecf97bc3\") { deviceName = \"INV1\"; }\n        else if (device_id === \"635da636844ebecc3aea5db2\") { deviceName = \"INV2\"; } //INV2_Delta WR\n        else if (device_id === \"635d239edb3382cd6c16379d\") { deviceName = \"EM\"; }\n        else if (device_id === \"635d25e9eb10dacac0e601b2\") { deviceName = \"Battery\"; }\n        else if (device_id === \"6386fc5e288091c6ea4573cb\") { deviceName = \"Heatpump\"; }\n        else if (device_id === \"640c6cb6abd639687c47871f\") { deviceName = \"Meter1\"; }\n        else if (device_id === \"648044cf93036384bee8f888\") { deviceName = \"Meter2\"; }\n\n        else if (device_id === \"635d5ad52f1fbdcdd81d14aa\") { deviceName = \"INV\"; }\n        else if (device_id === \"635e4a1eafad40ca9177240b\") { deviceName = \"Meter\"; }\n        else if (device_id === \"638a69bcc9b166daa3765ff5\") { deviceName = \"Heatpump\"; }\n        else if (device_id === \"635d1c7d52721ecc51b40f63\") { deviceName = \"Battery\"; }\n        else if (device_id === \"636119848ad111c7d42e0fc8\") { deviceName = \"Smart Plug1\"; }\n        else if (device_id === \"63611776ca34c6c731443286\") { deviceName = \"Smart Plug2\"; }\n        else if (device_id === \"636568e30cc6a1ac1ba0ed99\") { deviceName = \"Smart Plug3\"; }\n        else if (device_id === \"63663046624a33ab0f4d3b9d\") { deviceName = \"Smart Plug4\"; }\n        else if (device_id === \"6370aedcf56cb84196aa102f\") { deviceName = \"Smart Plug5\"; }\n\n        else { deviceName = \"Unknown Device\"; }// Set a default device name if the ID doesn't match any known cases\n\n        var signalValue = msg.payload.devices[i].signal;\n        stringobj.payload = [{\n            measurement: \"v1\",\n            fields: {\n                value: \"0\",\n                text: signalValue,\n                qu: \"0\"\n            },\n            tags: {\n\n                b: \"Block\",\n                bd: \"Block\",\n                d: deviceName,\n                dd: device_id,\n                dt: \"Device\",\n                f: \"Status\",\n                fd: \"Device_status\",\n                h: \"Device\",\n                iid: id,\n                m: \"1\",\n                p: \"ezee\",\n                u: \"W\"\n            },\n            timestamp: dateUTC1\n        }];\n        node.send(stringobj);\n\n        var SOCValue = msg.payload.devices[i].SOC;\n        if (typeof SOCValue !== \"undefined\") {\n            floatobj.payload = [{\n                measurement: \"v\",\n                fields: {\n                    value: SOCValue,\n                    text: \"0\",\n                    qu: \"0\"\n                },\n                tags: {\n\n                    b: \"Block\",\n                    bd: \"Block\",\n                    d: deviceName,\n                    dd: device_id,\n                    dt: \"Device\",\n                    f: \"SOC\",\n                    fd: \"SOC\",\n                    h: \"Device\",\n                    iid: id,\n                    m: \"1\",\n                    p: \"ezee\",\n                    u: \"W\"\n                },\n                timestamp: dateUTC1\n            }];\n            node.send(floatobj);\n        }\n\n        var currentWaterTempValue = msg.payload.devices[i].currentWaterTemp;\n        if (typeof currentWaterTempValue !== \"undefined\") {\n            floatobj.payload = [{\n                measurement: \"v\",\n                fields: {\n                    value: currentWaterTempValue,\n                    text: \"0\",\n                    qu: \"0\"\n                },\n                tags: {\n\n                    b: \"Block\",\n                    bd: \"Block\",\n                    d: deviceName,\n                    dd: device_id,\n                    dt: \"Device\",\n                    f: \"currentWaterTemp\",\n                    fd: \"currentWaterTemp\",\n                    h: \"Device\",\n                    iid: id,\n                    m: \"1\",\n                    p: \"ezee\",\n                    u: \"W\"\n                },\n                timestamp: dateUTC1\n            }];\n            node.send(floatobj);\n        }\n\n        var exportValue1 = msg.payload.devices[2].currentPowerInvSm;\n        if (device_id == \"635d239edb3382cd6c16379d\") {\n            obj.payload = [{\n                measurement: \"v\",\n                fields: {\n                    value: exportValue1,\n                    text: \"0\",\n                    qu: \"0\"\n                },\n                tags: {\n\n                    b: \"Block\",\n                    bd: \"Block\",\n                    d: deviceName,\n                    dd: device_id,\n                    dt: \"Device\",\n                    f: \"Powexp\",\n                    fd: \"currentPowerExport\",\n                    h: \"Device\",\n                    iid: \"6325d2aa127abdbc59591374\",\n                    m: \"1\",\n                    p: \"ezee\",\n                    u: \"W\"\n                },\n                timestamp: dateUTC1\n            }];\n            node.send(obj);\n        }\n\n        var exportValue2 = msg.payload.devices[1].currentPowerInvSm;\n        if (device_id == \"635e4a1eafad40ca9177240b\") {\n            obj.payload = [{\n                measurement: \"v\",\n                fields: {\n                    value: exportValue2,\n                    text: \"0\",\n                    qu: \"0\"\n                },\n                tags: {\n\n                    b: \"Block\",\n                    bd: \"Block\",\n                    d: deviceName,\n                    dd: device_id,\n                    dt: \"Device\",\n                    f: \"Powexp\",\n                    fd: \"currentPowerExport\",\n                    h: \"Device\",\n                    iid: \"62f74d6a23cdd5986a405055\",\n                    m: \"1\",\n                    p: \"ezee\",\n                    u: \"W\"\n                },\n                timestamp: dateUTC1\n            }];\n            node.send(obj);\n        }\n    }\n}\n\nelse {\n    // Handle the case where msg.payload.devices is not defined or not an array\n    console.error(\"msg.payload.devices is not an array or is undefined.\");\n}*/\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 560,
        "wires": [
            [
                "3836ac37f05ea7b1"
            ]
        ]
    },
    {
        "id": "aeecd767304dabee",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "2a83b84b579505b4",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 360,
        "wires": []
    },
    {
        "id": "31a1784e60b2b19a",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "object to array",
        "func": "\n let plantObj\n\nplantObj = []\n\n//for (i =0; i < msg.payload.length;i++)\n//{\n var swelect_api=msg.payload.Swelect_API_Test_Plant[0].dataPoints\n var keys=Object.keys(swelect_api);\n var swelect_api_values=Object.values(swelect_api);\n var swelect_sbi=Object.values(msg.payload.Swelect_SBI_Admin_Office_Vizag[0].dataPoints);\n var ompl_2MWp=Object.values(msg.payload.OMPL_2_MWp_Floating_Plant[0].dataPoints);\nvar obj={\n  timestamp:keys,\n       swelect_api_values,\n       swelect_sbi,\n       ompl_2MWp\n\n}\n\nplantObj.push(obj)\n//}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "27b333882e6ad1b2"
            ]
        ]
    },
    {
        "id": "27b333882e6ad1b2",
        "type": "function",
        "z": "15844ce26ed2117d",
        "name": "iteraton",
        "func": "let plantObj\n\nplantObj = []\n//for(j =0; j < msg.payload.length;j++)\nfor (var i =0; i < msg.payload[0].timestamp.length;i++)\n{\nvar obj={\n    Timestamp:msg.payload[0].timestamp[i],\n\"Swelect API_Test_Plant\":msg.payload[0].swelect_api_values[i],\n\"Swelect SBI_Admin_Office_Vizag\":msg.payload[0].swelect_sbi[i],\n\"OMPL 2 MWp Floating Plant\":msg.payload[0].ompl_2MWp[i],\n}\n\nplantObj.push(obj)\n}\nmsg.payload =plantObj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "60650b8a7ab32bf6"
            ]
        ]
    },
    {
        "id": "60650b8a7ab32bf6",
        "type": "csv",
        "z": "15844ce26ed2117d",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": true,
        "x": 730,
        "y": 380,
        "wires": [
            [
                "b77c3a7bacc846de"
            ]
        ]
    },
    {
        "id": "b77c3a7bacc846de",
        "type": "file",
        "z": "15844ce26ed2117d",
        "name": "sdsapi.csv",
        "filename": "Downloads/sdsapi.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 890,
        "y": 380,
        "wires": [
            [
                "2a83b84b579505b4"
            ]
        ]
    },
    {
        "id": "ef6e97dacb4fb4b6",
        "type": "inject",
        "z": "15844ce26ed2117d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1220,
        "y": 200,
        "wires": [
            [
                "41fbd7ff0210c9d1"
            ]
        ]
    },
    {
        "id": "41fbd7ff0210c9d1",
        "type": "http request",
        "z": "15844ce26ed2117d",
        "name": "GET Plant",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": " https://www.foxesscloud.com/c/v0/plant/status/all",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 200,
        "wires": [
            [
                "e6a135881f13e84e"
            ]
        ]
    },
    {
        "id": "e6a135881f13e84e",
        "type": "debug",
        "z": "15844ce26ed2117d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 260,
        "wires": []
    },
    {
        "id": "4f98dfaf752fcb0b",
        "type": "ui_upload",
        "z": "4214241c687a7bca",
        "group": "f1846e85c6da7e54",
        "title": "upload",
        "accept": "",
        "name": "",
        "order": 0,
        "width": "3",
        "height": "2",
        "chunk": "999",
        "transfer": "text",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "28dc91fe01a1b09e"
            ]
        ]
    },
    {
        "id": "28dc91fe01a1b09e",
        "type": "csv",
        "z": "4214241c687a7bca",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "9db0918bc97bcbc9"
            ]
        ]
    },
    {
        "id": "9db0918bc97bcbc9",
        "type": "function",
        "z": "4214241c687a7bca",
        "name": "function 418",
        "func": "var input = msg.payload;\n\n// Define a mapping of values to be changed\nvar valueMappings = {\n    \"Akku leer\": \"Battery_Empty\",\n    \"Akku voll\": \"Battery_Full\",\n    \"Ausgeschaltet\": \"Switched_Off\",\n    \"Batterie Diagnose\": \"Battery_Diagnosis\",\n    \"BMS Konfiguration erforderlich\": \"Battery_Configuration_required\",\n    \"BMS-Fehler\": \"BMS-Failure\",\n    \"Entladen\": \"Discharged\",\n    \"Fehler Ladegerät\": \"Charge_Error\",\n    \"Fehler: NA-Schutz Netz\": \"Failure: NA-Network_Protection\",\n    \"Laden\": \"Charging\",\n    \"Ladeschlussphase\": \"Charging_Complete_Phase\",\n    \"Module Imbalance\": \"Module_Imbalance\",\n    \"Netz & Entladen\": \"Mains & Discharged\",\n    \"Passiv\": \"Passive\",\n    \"PV & Entladen\": \"PV & Discharged\",\n    \"Softwareaktualisierung\": \"Software_Update\",\n    \"Peak-Shaving: Warten\": \"Peak-Shaving: Waiting\",\n    // Add more mappings as needed\n};\n\n// Define a mapping of number conversions\nvar numberMappings = {\n    \"Akku leer\": 100,\n    \"Akku voll\": 101,\n    \"Ausgeschaltet\": 102,\n    \"Batterie Diagnose\": 103,\n    \"BMS Konfiguration erforderlich\": 104,\n    \"BMS-Fehler\": 105,\n    \"Entladen\": 106,\n    \"Fehler Ladegerät\": 107,\n    \"Fehler: NA-Schutz Netz\": 108,\n    \"Laden\": 109,\n    \"Ladeschlussphase\": 110,\n    \"Module Imbalance\": 111,\n    \"Netz & Entladen\": 112,\n    \"Passiv\": 113,\n    \"PV & Entladen\": 114,\n    \"Softwareaktualisierung\": 115,\n    \"Peak-Shaving: Warten\": 116,\n    // Add more number mappings as needed\n};\n\n// Create a new object to store the updated values\nvar updatedObject = {};\n\n// Iterate through the keys in the input object\nfor (var key in input) {\n    if (input.hasOwnProperty(key)) {\n        // Check if the key has a mapping, and if so, replace the value\n        if (valueMappings.hasOwnProperty(input[key])) {\n            updatedObject[key] = valueMappings[input[key]];\n        } else {\n            updatedObject[key] = input[key]; // Keep the original value if no mapping is found\n        }\n\n        // Check if the key has a number conversion mapping, and if so, convert the value\n        if (numberMappings.hasOwnProperty(input[key])) {\n            updatedObject[key + \"_CODE\"] = numberMappings[input[key]];\n        }\n    }\n}\n\nmsg.payload = updatedObject;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": [
            [
                "23f804593b7c19ff"
            ]
        ]
    },
    {
        "id": "23f804593b7c19ff",
        "type": "function",
        "z": "4214241c687a7bca",
        "name": "function 419",
        "func": "var serialNumber = context.get(\"serialNumber\") || 1;\n\nvar input = msg.payload\n\nvar today = new Date();\nvar date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\n//var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\nvar nowTime1 = date;\ntoday.setHours(0, 0, 0, 0);\n\nvar epochTime = Math.floor(today.getTime() / 1000);\nconst inputDate = nowTime1;\n\n\n\nvar final1 = {\n    SerialNo: serialNumber,\n    nowTime1,\n    epochTime,\n    input\n\n}\nserialNumber++;\n\n// Store the updated serialNumber in context\ncontext.set(\"serialNumber\", serialNumber);\n\nmsg.payload = final1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "5a8a928a8881dca2"
            ]
        ]
    },
    {
        "id": "5a8a928a8881dca2",
        "type": "function",
        "z": "4214241c687a7bca",
        "name": "multiple measurement points",
        "func": "\n//for (var i = 0; i < msg.payload.length; i++) {\n\n    \n    //var time = new Date().getTime()\n    var obj = {};\n    obj.payload =\n\n        [\n            {\n                measurement: \"senec_traff2\",\n                fields: {\n\n                    value: msg.payload.input.Plant_Status,\n                    text: \"\",\n                    qu: 0\n                    \n                },\n                tags: {\n\n                    b: msg.payload.input.Serial_No,\n                    bd: \"\",\n                    d: msg.payload.nowTime1,\n                    dd: \"Devices\",\n                    dt: msg.payload.input.Installed_Date,\n                    f: msg.payload.SerialNo,\n                    fd: msg.payload.input.Plant_Status_CODE,\n                    h: \"\",\n                    iid: \"SENEC\",\n                    m: 1,\n                    p: msg.payload.input.Plant_name,\n                    u: \"kWh\"\n\n                },\n\n                \n                timestamp: msg.payload.epochTime * 1000,\n            }\n        ]\n        ;\n\n    //plantObj.push(obj)\n    node.send(obj);\n\n return null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "b85d2c21e66ace79"
            ]
        ]
    },
    {
        "id": "b85d2c21e66ace79",
        "type": "debug",
        "z": "4214241c687a7bca",
        "name": "debug 1261",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 460,
        "wires": []
    },
    {
        "id": "26bbb044b99d7148",
        "type": "influxdb batch",
        "z": "4214241c687a7bca",
        "influxdb": "e52f5bf728d79e90",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "iplon",
        "bucket": "iGOP+",
        "x": 870,
        "y": 380,
        "wires": []
    },
    {
        "id": "408ef9f96725c8ab",
        "type": "function",
        "z": "835dffc2dea52a5f",
        "name": "IGBT_Deviation_alarm",
        "func": "/*let plantObj\nplantObj = []\n\n//var sum = 0\n\n//var IGBTAVG;\n//var IGBT_Deviation_Alarm\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var EAE_DAY = msg.payload[i]._value;\n  {\n    EAE_DAY = EAE_DAY > 4 ? 100 : EAE_DAY;\n  \n    var obj1 =\n    {\n      time,\n      b,\n      bd,\n      d,\n      dd,\n      dt,\n      f,\n      fd,\n      h,\n      iid,\n      m,\n      p,\n      u,\n      EAE_DAY      \n\n    }\n    plantObj.push(obj1)\n\n  }\n}\nmsg.payload = plantObj\n\nreturn msg; */\n\n let plantObj = [];\nlet sustainTime = 2 * 60 * 1000; // 10 minutes in milliseconds\n\nfor (let i = 0; i < msg.payload.length; i++) {\n  let time = msg.payload[i]._time;\n  let b = msg.payload[i].b;\n  let bd = msg.payload[i].d;\n  let d = msg.payload[i].d;\n  let dd = msg.payload[i].dd;\n  let dt = msg.payload[i].dt;\n  let f = msg.payload[i].f;\n  let fd = msg.payload[i].fd;\n  let h = msg.payload[i].h;\n  let iid = msg.payload[i].iid;\n  let m = msg.payload[i].m;\n  let p = msg.payload[i].p;\n  let u = msg.payload[i].u;\n  let EAE_DAY = msg.payload[i]._value;\n\n  // Check if EAE_DAY is less than 4\n  if (EAE_DAY > 4.5) {\n    // Check if EAE_DAY sustains for 10 minutes\n    let sustained = true;\n    for (let j = i - 1; j >= 0; j--) {\n      if (msg.payload[j]._value <= 4.5) {\n        sustained = false;\n        break;\n      }\n      if (time - msg.payload[j]._time > sustainTime) {\n        break;\n      }\n    }\n\n    if (sustained) {\n      // If EAE_DAY is less than 4 and sustains for 10 minutes, set EAE_DAY to 0.5 and show a fault message\n      EAE_DAY = 0.5;\n    //  msg.payload = \"Fault\";\n    } //else {\n      // If EAE_DAY is less than 4 but doesn't sustain for 10 minutes, show the original EAE_DAY value\n    //  msg.payload = EAE_DAY;\n   // }\n  } else {\n    // If EAE_DAY is greater than or equal to 4, show the original EAE_DAY value\n    EAE_DAY = msg.payload[i]._value;\n  }\n\n  let obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    EAE_DAY,\n  };\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 380,
        "wires": [
            [
                "1244866a7a60bec2"
            ]
        ]
    },
    {
        "id": "3fca8647e1b4f66f",
        "type": "function",
        "z": "835dffc2dea52a5f",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].EAE_DAY\n   var tag = \"EAE_DAY\"\n   var time = new Date(msg.payload[i].time).getTime();\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n   var fd = \"EAE_DAY\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "04d5e4d5641dbfc1"
            ]
        ]
    },
    {
        "id": "04d5e4d5641dbfc1",
        "type": "function",
        "z": "835dffc2dea52a5f",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n      // var dateUTC = new Date(msg.payload[i].time).getTime();\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"STATUS\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\ntimestamp: msg.payload[i].time\n//time: dateUTC \n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 380,
        "wires": [
            [
                "c850a7c6192d3933"
            ]
        ]
    },
    {
        "id": "c850a7c6192d3933",
        "type": "debug",
        "z": "835dffc2dea52a5f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 280,
        "wires": []
    },
    {
        "id": "d14d1d21598fbeb6",
        "type": "influxdb batch",
        "z": "835dffc2dea52a5f",
        "influxdb": "c006a6cbdf4a6746",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "largeutilitylakeasia",
        "bucket": "tata",
        "x": 1520,
        "y": 460,
        "wires": []
    },
    {
        "id": "4cbb41dcd58cd6bf",
        "type": "influxdb in",
        "z": "835dffc2dea52a5f",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": " // from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"IGBT_TEMP\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"IGBT_TEMP\")\n\n//from(bucket: \"tata\")|> range(start:  -1d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] =~ /_INV1/)|> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE_DAY\")\n\nfrom(bucket: \"tata\")|> range(start:  -20m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B01\")|> filter(fn: (r) => r[\"d\"] == \"B01_INV1\")|> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE_DAY\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 560,
        "y": 380,
        "wires": [
            [
                "408ef9f96725c8ab",
                "06a43d99125a5931"
            ]
        ]
    },
    {
        "id": "251c19acb271a754",
        "type": "inject",
        "z": "835dffc2dea52a5f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "4cbb41dcd58cd6bf"
            ]
        ]
    },
    {
        "id": "f416d805d30f987c",
        "type": "file",
        "z": "835dffc2dea52a5f",
        "name": "inverter",
        "filename": "D:\\iPLON_Tamil\\INVERTER.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1520,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "bfc7cf09f5c29a1a",
        "type": "influxdb batch",
        "z": "835dffc2dea52a5f",
        "influxdb": "c006a6cbdf4a6746",
        "precision": "",
        "retentionPolicy": "",
        "name": "test",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "influxdev",
        "bucket": "iplon",
        "x": 1490,
        "y": 420,
        "wires": []
    },
    {
        "id": "1244866a7a60bec2",
        "type": "debug",
        "z": "835dffc2dea52a5f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 560,
        "wires": []
    },
    {
        "id": "06a43d99125a5931",
        "type": "debug",
        "z": "835dffc2dea52a5f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "f54aff61a0ba3547",
        "type": "inject",
        "z": "b590a82e70d8c9a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "717f8eb6018b9b78",
                "47c7c86feec6e9d4"
            ]
        ]
    },
    {
        "id": "47c7c86feec6e9d4",
        "type": "influxdb in",
        "z": "b590a82e70d8c9a7",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": " // from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"IGBT_TEMP\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"IGBT_TEMP\")\n\n//from(bucket: \"tata\")|> range(start:  -1d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] =~ /_INV1/)|> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE_DAY\")\n\n//from(bucket: \"tata\")|> range(start:  -5d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] !~ /SMU/)|> filter(fn: (r) => r[\"d\"] =~ /_INV/)|> filter(fn: (r) => r[\"f\"] == \"COMMUNICATION_STATUS\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")\n\nfrom(bucket: \"tata\")|> range(start:  -10m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B60\")|> filter(fn: (r) => r[\"d\"] =~ /SMU/ or r[\"d\"] != \"B10_INV2_SMU13\" or r[\"d\"] != \"B10_INV3_SMU21\" or r[\"d\"] != \"B10_INV4_SMU31\") |>filter(fn: (r) => r[\"f\"] == \"IDC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 280,
        "y": 480,
        "wires": [
            [
                "6e9caba32a397eb5"
            ]
        ]
    },
    {
        "id": "4ae5e740bf2a4dba",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\n\n// Initialize max1 to a very small value so that the first value is always greater\nlet max1 = Number.MIN_SAFE_INTEGER;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var COMM = msg.payload[i]._value;\n\n  // Update max1 if the current value is greater\n  max1 = Math.max(max1, COMM);\n\n  var obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    COMM,\n    max1\n  };\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 760,
        "wires": [
            [
                "04239b58011977eb"
            ]
        ]
    },
    {
        "id": "1f28decb52031082",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].MAX1\n   var tag = \"MAX1\"\n   var time = new Date(msg.payload[i].time).getTime();\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n   var fd = \"MAX1\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "1fe318f4e5b9793d"
            ]
        ]
    },
    {
        "id": "496f84f3779592d1",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n      // var dateUTC = new Date(msg.payload[i].time).getTime();\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"MAX\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\ntimestamp: msg.payload[i].time\n//time: dateUTC \n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 700,
        "wires": [
            [
                "1062e7a32a21efaf"
            ]
        ]
    },
    {
        "id": "20f01e3b7fc1a547",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 220,
        "wires": []
    },
    {
        "id": "cbd3ea339c2e790f",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "debug 1266",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 340,
        "wires": []
    },
    {
        "id": "1062e7a32a21efaf",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "debug 1267",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 620,
        "wires": []
    },
    {
        "id": "a70c92794799c9ea",
        "type": "influxdb batch",
        "z": "b590a82e70d8c9a7",
        "influxdb": "c006a6cbdf4a6746",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "largeutilitylakeasia",
        "bucket": "tata",
        "x": 1090,
        "y": 580,
        "wires": []
    },
    {
        "id": "030913c99e5153a7",
        "type": "influxdb batch",
        "z": "b590a82e70d8c9a7",
        "influxdb": "d9624eedb8c800e6",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "influxdev",
        "bucket": "iplon",
        "x": 900,
        "y": 800,
        "wires": []
    },
    {
        "id": "60101c6c548005bf",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "debug 1268",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 400,
        "wires": []
    },
    {
        "id": "6668bee54790f180",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\nlet MAX2=0;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n  let time = msg.payload[i]._time;\n  let b = msg.payload[i].b;\n  let bd = msg.payload[i].bd;\n  let d = msg.payload[i].d;\n  let dd = msg.payload[i].dd;\n  let dt = msg.payload[i].dt;\n  let f = msg.payload[i].f;\n  let fd = msg.payload[i].fd;\n  let h = msg.payload[i].h;\n  let iid = msg.payload[i].iid;\n  let m = msg.payload[i].m;\n  let p = msg.payload[i].p;\n  let u = msg.payload[i].u;\n  let COMM = msg.payload[i]._value;\n\n  // Check if d is not equal to B01 before updating MAX1\n \n    MAX2 = Math.max( COMM);\n\n  let obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    COMM,\n    MAX2,\n  };\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n//msg.MAX2 = MAX2; // You can include MAX1 in the output if needed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "717f8eb6018b9b78",
        "type": "influxdb in",
        "z": "b590a82e70d8c9a7",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": " // from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"IGBT_TEMP\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"IGBT_TEMP\")\n\n//from(bucket: \"tata\")|> range(start:  -1d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] =~ /_INV1/)|> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE_DAY\")\n\n//from(bucket: \"tata\")|> range(start:  -5d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] !~ /SMU/)|> filter(fn: (r) => r[\"d\"] =~ /_INV/)|> filter(fn: (r) => r[\"f\"] == \"COMMUNICATION_STATUS\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")\n\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B60\")|> filter(fn: (r) => r[\"d\"] == \"B10_INV1_SMU03\" or r[\"d\"] == \"B10_INV2_SMU13\" or r[\"d\"] == \"B10_INV3_SMU21\" or r[\"d\"] == \"B10_INV4_SMU31\") |>filter(fn: (r) => r[\"f\"] == \"IDC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 280,
        "y": 580,
        "wires": [
            [
                "4ae5e740bf2a4dba"
            ]
        ]
    },
    {
        "id": "04239b58011977eb",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].max1\n   var tag = \"max1\"\n   var time = new Date(msg.payload[i].time).getTime();\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n   var fd = \"max1\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 700,
        "wires": [
            [
                "496f84f3779592d1"
            ]
        ]
    },
    {
        "id": "10367820006600a5",
        "type": "join",
        "z": "b590a82e70d8c9a7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 850,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1fe318f4e5b9793d",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n      // var dateUTC = new Date(msg.payload[i].time).getTime();\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"MAX\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\ntimestamp: msg.payload[i].time\n//time: dateUTC \n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "998b26fec7c7602e",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "debug 1269",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 360,
        "wires": []
    },
    {
        "id": "e44c10ecdbc4f2e3",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "debug 1270",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 380,
        "wires": []
    },
    {
        "id": "61daf7e8557f7409",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\nlet MAX1 =0;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n  let time = msg.payload[i]._time;\n  let b = msg.payload[i].b;\n  let bd = msg.payload[i].bd;\n  let d = msg.payload[i].d;\n  let dd = msg.payload[i].dd;\n  let dt = msg.payload[i].dt;\n  let f = msg.payload[i].f;\n  let fd = msg.payload[i].fd;\n  let h = msg.payload[i].h;\n  let iid = msg.payload[i].iid;\n  let m = msg.payload[i].m;\n  let p = msg.payload[i].p;\n  let u = msg.payload[i].u;\n  let COMM = msg.payload[i]._value;\n\n  // Check if d is not equal to B01 before updating MAX1\n \n    MAX1 = Math.max(COMM);\n\n  let obj1 = [\n       COMM,\n       time\n   \n  ];\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n//msg.MAX2 = MAX2; // You can include MAX1 in the output if needed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "9ca10a43f8231feb",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\nlet value_array = [];\nfor (let i = 0; i < msg.payload.length; i++)\n{\n  \n  if(msg.payload[i].d == \"B04_INV1\") \n  {\n      var b4 = msg.payload[i]._value\n\n  }\n  else if (msg.payload[i].d == \"B05_INV1\")\n  {\n      var b5 = msg.payload[i]._value\n  }\n\n      var max1 = Math.max(b4, b5);\n\n\nif ((msg.payload[i].d != \"B04_INV1\") &&  (msg.payload[i].d != \"B05_INV1\"))\n{\n  let time = msg.payload[i]._time;\n  let b = msg.payload[i].b;\n  let bd = msg.payload[i].bd;\n  let d = msg.payload[i].d;\n  let dd = msg.payload[i].dd;\n  let dt = msg.payload[i].dt;\n  let f = msg.payload[i].f;\n  let fd = msg.payload[i].fd;\n  let h = msg.payload[i].h;\n  let iid = msg.payload[i].iid;\n  let m = msg.payload[i].m;\n  let p = msg.payload[i].p;\n  let u = msg.payload[i].u;\n  var value = msg.payload[i]._value;\n\n  // Check if d is not equal to B01 before updating MAX1\n   value_array.push(value)\n  \n  var max2 = Math.max(...value_array);\n\n  let obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    max1,\n    max2\n    \n    \n  };\n\n  plantObj.push(obj1);\n}\n}\nmsg.payload = plantObj;\n//msg.MAX1 = MAX1; // You can include MAX1 in the output if needed\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "998b26fec7c7602e"
            ]
        ]
    },
    {
        "id": "1e67b4f40a52f0d7",
        "type": "calculator",
        "z": "b590a82e70d8c9a7",
        "name": "",
        "inputMsgField": "payload",
        "outputMsgField": "payload",
        "operation": "max",
        "constant": "",
        "round": false,
        "truncate": false,
        "decimals": 0,
        "decimals2": 0,
        "x": 680,
        "y": 420,
        "wires": [
            [
                "1f28decb52031082"
            ]
        ]
    },
    {
        "id": "6e9caba32a397eb5",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\n\n// Initialize max1 to a very small value so that the first value is always greater\nlet max2 = Number.MIN_SAFE_INTEGER;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var COMM = msg.payload[i]._value;\n\n  // Update max1 if the current value is greater\n  max2 = Math.max(max2, COMM);\n\n  var obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    COMM,\n    max2\n  };\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 480,
        "wires": [
            [
                "506b75db93ec7f2f"
            ]
        ]
    },
    {
        "id": "506b75db93ec7f2f",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].max2\n   var tag = \"max2\"\n   var time = new Date(msg.payload[i].time).getTime();\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n   var fd = \"max2\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 480,
        "wires": [
            [
                "c4ebeb10403fbb7c"
            ]
        ]
    },
    {
        "id": "c4ebeb10403fbb7c",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n      // var dateUTC = new Date(msg.payload[i].time).getTime();\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"MAX\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\ntimestamp: msg.payload[i].time\n//time: dateUTC \n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "cbd3ea339c2e790f"
            ]
        ]
    },
    {
        "id": "66633572a1a00939",
        "type": "influxdb batch",
        "z": "b590a82e70d8c9a7",
        "influxdb": "d9624eedb8c800e6",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "influxdev",
        "bucket": "iplon",
        "x": 1060,
        "y": 520,
        "wires": []
    },
    {
        "id": "9f28275479c0d93f",
        "type": "debug",
        "z": "b590a82e70d8c9a7",
        "name": "debug 1271",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 840,
        "wires": []
    },
    {
        "id": "ab03130ab088a736",
        "type": "influxdb batch",
        "z": "b590a82e70d8c9a7",
        "influxdb": "c006a6cbdf4a6746",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "largeutilitylakeasia",
        "bucket": "tata",
        "x": 1110,
        "y": 700,
        "wires": []
    },
    {
        "id": "56afc172fe0d9338",
        "type": "inject",
        "z": "b590a82e70d8c9a7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 960,
        "wires": [
            [
                "07e6ae955ddadbfe"
            ]
        ]
    },
    {
        "id": "07e6ae955ddadbfe",
        "type": "influxdb in",
        "z": "b590a82e70d8c9a7",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": " // from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"IGBT_TEMP\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"IGBT_TEMP\")\n\n//from(bucket: \"tata\")|> range(start:  -1d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] =~ /_INV1/)|> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE_DAY\")\n\n//from(bucket: \"tata\")|> range(start:  -5d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] !~ /SMU/)|> filter(fn: (r) => r[\"d\"] =~ /_INV/)|> filter(fn: (r) => r[\"f\"] == \"COMMUNICATION_STATUS\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")\n\nfrom(bucket: \"tata\")|> range(start:  -10m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B60\")|> filter(fn: (r) => r[\"d\"] =~ /SMU/ or r[\"d\"] != \"B10_INV2_SMU13\" or r[\"d\"] != \"B10_INV3_SMU21\" or r[\"d\"] != \"B10_INV4_SMU31\") |>filter(fn: (r) => r[\"f\"] == \"IDC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 640,
        "y": 920,
        "wires": [
            [
                "962bd6fdd2572e1d"
            ]
        ]
    },
    {
        "id": "962bd6fdd2572e1d",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\n\n// Initialize max1 to a very small value so that the first value is always greater\nlet max2 = Number.MIN_SAFE_INTEGER;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var COMM = msg.payload[i]._value;\n\n  // Update max1 if the current value is greater\n  max2 = Math.max(max2, COMM);\n\n  var obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    COMM,\n    max2\n  };\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 920,
        "wires": [
            [
                "081b17b9ef14a5d3"
            ]
        ]
    },
    {
        "id": "081b17b9ef14a5d3",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].max2\n   var tag = \"max2\"\n   var time = new Date(msg.payload[i].time).getTime();\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n   var fd = \"max2\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 920,
        "wires": [
            [
                "ac9dca82c38a7d99"
            ]
        ]
    },
    {
        "id": "ac9dca82c38a7d99",
        "type": "function",
        "z": "b590a82e70d8c9a7",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n      // var dateUTC = new Date(msg.payload[i].time).getTime();\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"MAX\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\ntimestamp: msg.payload[i].time\n//time: dateUTC \n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "e15b45eef45ae2cc",
        "type": "function",
        "z": "cd23a9f29fb11070",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar IGBTAVG;\nvar IGBT_Deviation_Alarm\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var igbt_value = msg.payload[i]._value;\n  {\n    IGBTAVG = sum += msg.payload[i]._value\n    IGBTAVG = sum / msg.payload.length\n    flow.set(\"IGBTAVG\", IGBTAVG)\n  }\n}\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var igbt_value = msg.payload[i]._value;\n  {\n    if (IGBTAVG < msg.payload[i]._value) {\n      IGBT_Deviation_Alarm = 1\n    }\n    if (IGBTAVG > msg.payload[i]._value) {\n      IGBT_Deviation_Alarm = 0\n    }\n\n    var obj1 =\n    {\n      time,\n      b,\n      bd,\n      d,\n      dd,\n      dt,\n      f,\n      fd,\n      h,\n      iid,\n      m,\n      p,\n      u,\n      IGBTAVG,\n      IGBT_Deviation_Alarm\n\n    }\n    plantObj.push(obj1)\n\n  }\n}\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 360,
        "wires": [
            [
                "390a795eb8d32e15"
            ]
        ]
    },
    {
        "id": "390a795eb8d32e15",
        "type": "function",
        "z": "cd23a9f29fb11070",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].IGBT_Deviation_Alarm\n    var tag = \"IGBT_Deviation_Alarm\"\n    var time = msg.payload[i].time;\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n    var fd = \"IGBT_Deviation_Alarm\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 360,
        "wires": [
            [
                "ef12eece2345223f",
                "e494d2a831dbb793"
            ]
        ]
    },
    {
        "id": "ef12eece2345223f",
        "type": "function",
        "z": "cd23a9f29fb11070",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"Iyyer_test\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\n time: msg.payload[i].time\n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 360,
        "wires": [
            [
                "25edb4af1f852eb1"
            ]
        ]
    },
    {
        "id": "d2adacbfd5fc8458",
        "type": "debug",
        "z": "cd23a9f29fb11070",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 440,
        "wires": []
    },
    {
        "id": "25edb4af1f852eb1",
        "type": "debug",
        "z": "cd23a9f29fb11070",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 360,
        "wires": []
    },
    {
        "id": "b2110a69c23d70c9",
        "type": "influxdb batch",
        "z": "cd23a9f29fb11070",
        "influxdb": "c006a6cbdf4a6746",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "largeutilitylakeasia",
        "bucket": "tata",
        "x": 1400,
        "y": 440,
        "wires": []
    },
    {
        "id": "d606e9b48462ea29",
        "type": "influxdb in",
        "z": "cd23a9f29fb11070",
        "influxdb": "c006a6cbdf4a6746",
        "name": "testdb 2.0",
        "query": "  from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] == \"B01_INV1\")|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PAC\")\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] == \"B01_INV1\")|> filter(fn: (r) => r[\"f\"] == \"EAE\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE\")\n  ",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "d2adacbfd5fc8458",
                "e15b45eef45ae2cc"
            ]
        ]
    },
    {
        "id": "e494d2a831dbb793",
        "type": "function",
        "z": "cd23a9f29fb11070",
        "name": "influx table",
        "func": "\nlet IGBTAVG = flow.get(\"IGBTAVG\")\n\nfor (var i = 0; i < msg.payload.length; i++) {\n       var obj = {};\n\n       obj.payload =\n              [\n                     {\n                            measurement: \"Iyyer_test\",\n\n                            fields: {\n\n                                   value: IGBTAVG,\n                                   text: \"0\",\n                                   qu: \"0\"\n\n                            },\n                            tags: {\n                                   b: msg.payload[i].b,\n                                   bd: msg.payload[i].d,\n                                   d: msg.payload[i].d,\n                                   dd: msg.payload[i].dd,\n                                   dt: msg.payload[i].dt,\n                                   f: \"IGBTAVG\",\n                                   fd: \"IGBTAVG\",\n                                   h: msg.payload[i].h,\n                                   iid: msg.payload[i].iid,\n                                   m: msg.payload[i].m,\n                                   p: msg.payload[i].p,\n                                   u: msg.payload[i].u\n\n\n                            },\n\n                            time: msg.payload[i].time\n                     }\n              ];\n\n       //plantObj.push(obj)\n       node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 500,
        "wires": [
            [
                "602bf36559474310"
            ]
        ]
    },
    {
        "id": "602bf36559474310",
        "type": "debug",
        "z": "cd23a9f29fb11070",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6e4d5b7f5782ae2",
        "type": "inject",
        "z": "cd23a9f29fb11070",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1116ab0da048bea4",
        "type": "function",
        "z": "cd23a9f29fb11070",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n    \n{\n    var newMsg = {};\n    newMsg.payload = {\n        TIME:new Date(msg.payload[j][i].time),\n        EAE_DAY:msg.payload[j][i].last,\n        PLANT:msg.payload[j][i].p,\n        BLOCK:msg.payload[j][i].b,\n        DEVICE:msg.payload[j][i].d,\n        FIELD:msg.payload[j][i].f\n        \n    }\n    node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b91511cda2765ad3",
        "type": "function",
        "z": "a11a2520e91d968b",
        "name": "PR Calculation",
        "func": "let plantObj\nplantObj = []\n\n//var value=0;\nvar t = \"EAE_DAY\";\nvar EAE_DAY1 = 0;  \nfor (var i = 0; i < msg.payload.topic1.length; i++) {\n  \n \n var b = msg.payload.topic1[i].b;\n var bd = msg.payload.topic1[i].bd;\n var d = msg.payload.topic1[i].d;\n var dd = msg.payload.topic1[i].dd;\n var dt = msg.payload.topic1[i].dt;\n var f = msg.payload.topic1[i].f;\n var fd = msg.payload.topic1[i].fd;\n var h = msg.payload.topic1[i].h;\n var iid = msg.payload.topic1[i].iid;\n var m = msg.payload.topic1[i].m;\n var p = msg.payload.topic1[i].p;\n //var qu = msg.payload[i].qu;\n //var text = msg.payload[i].text;\n var u = msg.payload.topic1[i].u;\n //var value;\n \n {\n              for (var j = 0; j < msg.payload.EAE.length; j++) {\n                     if (msg.payload.topic1[i].d == msg.payload.EAE[j].d) {\n                            var eae = msg.payload.EAE[j]._value;\n                            var eaemin = msg.payload.topic1[i]._value;\n                            var time = msg.payload.EAE[j]._time;\n                            if (eae >= eaemin) {\n                                   EAE_DAY1 = eae - eaemin\n                            }\n                     }\n              }\n //PR1 = (((pac * 1000) / 1376) / radiation) * 100\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n //qu,\n //text,\n u,\n eae,\n t,\n EAE_DAY1\n\n }\n plantObj.push(obj1)\n }\n}\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1200,
        "wires": [
            [
                "0ae68ca581f71162"
            ]
        ]
    },
    {
        "id": "9106bb7579114920",
        "type": "split",
        "z": "a11a2520e91d968b",
        "name": "",
        "splt": "/n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "905de92a0e3a3331"
            ]
        ]
    },
    {
        "id": "905de92a0e3a3331",
        "type": "switch",
        "z": "a11a2520e91d968b",
        "name": "",
        "property": "payload.result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "EAE_MIN",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EAE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1240,
        "wires": [
            [
                "4dba0b36e5eca955"
            ],
            [
                "0a27ce155a0a7a9c"
            ]
        ]
    },
    {
        "id": "4dba0b36e5eca955",
        "type": "join",
        "z": "a11a2520e91d968b",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 1180,
        "wires": [
            [
                "314a62907c0b1e08"
            ]
        ]
    },
    {
        "id": "07052370492cc8f7",
        "type": "change",
        "z": "a11a2520e91d968b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "EAE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 1280,
        "wires": [
            [
                "314a62907c0b1e08"
            ]
        ]
    },
    {
        "id": "314a62907c0b1e08",
        "type": "function",
        "z": "a11a2520e91d968b",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"EAE\":\n        context.data.EAE = msg.payload;\n        msg = null;\n        break;\n    case \"topic1\":\n        context.data.topic1 = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.EAE != null && context.data.topic1 != null) {\n    var data_combine = {\n        \"EAE\": context.data.EAE,\n        \"topic1\": context.data.topic1\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1200,
        "wires": [
            [
                "b91511cda2765ad3"
            ]
        ]
    },
    {
        "id": "0ae68ca581f71162",
        "type": "function",
        "z": "a11a2520e91d968b",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n var pr= msg.payload[i].EAE_DAY1\n var tag = msg.payload[i].t\n var time = msg.payload[i].time;\n var b = msg.payload[i].b;\n var bd = msg.payload[i].d;\n var d = msg.payload[i].d;\n var dd = msg.payload[i].dd;\n var dt = msg.payload[i].dt;\n var f = msg.payload[i].f;\n var fd = \"timestamp\";\n var h = msg.payload[i].h;\n var iid = msg.payload[i].iid;\n var m = msg.payload[i].m;\n var p = msg.payload[i].p;\n var u = msg.payload[i].u;\n var value= pr\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1200,
        "wires": [
            [
                "f8bd9acb7630c811",
                "42119f9850fdba97"
            ]
        ]
    },
    {
        "id": "f8bd9acb7630c811",
        "type": "function",
        "z": "a11a2520e91d968b",
        "name": "influx table",
        "func": "var plantObj = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    var dateUTC = new Date(msg.payload[i].time).getTime();\n    var obj = {};\n    obj.payload =[{\n       measurement: \"report\",\n       fields: {\n            value: msg.payload[i].value,\n            text:\"0\",\n            qu:\"0\"\n            },\n        tags: {\n            b : msg.payload[i].b,\n            bd : msg.payload[i].d,\n            d :msg.payload[i].d,\n            dd : msg.payload[i].dd,\n            dt : msg.payload[i].dt,\n            f :msg.payload[i].tag,\n            fd : msg.payload[i].fd,\n            h :msg.payload[i].h,\n            iid : msg.payload[i].iid,\n            m : msg.payload[i].m,\n            p : msg.payload[i].p,\n            u : msg.payload[i].u\n             },\n        timestamp: dateUTC\n        }];\n //plantObj.push(obj)\n node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1000,
        "wires": [
            [
                "72c71e692f289d66"
            ]
        ]
    },
    {
        "id": "72c71e692f289d66",
        "type": "debug",
        "z": "a11a2520e91d968b",
        "name": "eaeday",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1080,
        "wires": []
    },
    {
        "id": "279e1474966eb6b6",
        "type": "comment",
        "z": "a11a2520e91d968b",
        "name": "CR EAE_DAY",
        "info": "",
        "x": 110,
        "y": 980,
        "wires": []
    },
    {
        "id": "42119f9850fdba97",
        "type": "debug",
        "z": "a11a2520e91d968b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 780,
        "wires": []
    },
    {
        "id": "0a27ce155a0a7a9c",
        "type": "join",
        "z": "a11a2520e91d968b",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 950,
        "y": 1280,
        "wires": [
            [
                "07052370492cc8f7"
            ]
        ]
    },
    {
        "id": "fe5a0f6d49ce18a2",
        "type": "influxdb in",
        "z": "a11a2520e91d968b",
        "influxdb": "5d0b89a7c8341473",
        "name": "Best_cotton",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "microgridfourlakeasia",
        "x": 530,
        "y": 1240,
        "wires": [
            [
                "9106bb7579114920",
                "49c6cbae18b3b353"
            ]
        ]
    },
    {
        "id": "37f12ecf268966ef",
        "type": "template",
        "z": "a11a2520e91d968b",
        "name": "CSV data",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "plant,measurement,iid,device,field,factor\nbest_cotton,v,5001,INV01,EAE,1.0\n",
        "output": "str",
        "x": 100,
        "y": 1240,
        "wires": [
            [
                "ca35df7b41538732"
            ]
        ]
    },
    {
        "id": "ca35df7b41538732",
        "type": "csv",
        "z": "a11a2520e91d968b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 230,
        "y": 1240,
        "wires": [
            [
                "72eacef403f60b6c"
            ]
        ]
    },
    {
        "id": "72eacef403f60b6c",
        "type": "function",
        "z": "a11a2520e91d968b",
        "name": "function 145",
        "func": "var plant = msg.payload.plant;\n//var iid = msg.payload.iid;\nvar device = msg.payload.device;\nvar field = msg.payload.field;\nvar measurement = msg.payload.measurement;\nvar factor = msg.payload.factor;\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar d1 = new Date($today);\nvar tstart = new Date(d).toISOString();\nvar tend = new Date(d1).toISOString();\n\n\n\n//var q = ' from(bucket: \"hysolwin\") |> range(start:-10d)  |>filter(fn: (r)=>r[\"_measurement\"]== \\\"' + measurement + '\\\")|>filter(fn:(r)=>r[\"p\"]== \\\"' + plant + '\\\")|>filter(fn:(r)=>r[\"dt\"]== \\\"' + device + '\\\")|>filter(fn:(r)=>r[\"f\"]== \\\"' + field + '\\\") |> aggregateWindow(every: 5m, fn: last, createEmpty: false)|>yield(name:\"last\")'\nvar q = ' from(bucket: \"best_cotton\")|> range(start: -1d, stop:-330m) |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"iid\"] == \"5001\") |> filter(fn: (r) => r[\"p\"] == \\\"' + plant + '\\\") |> filter(fn: (r) => r[\"d\"] == \\\"' + device + '\\\") |> filter(fn: (r) => r[\"f\"] == \\\"' + field + '\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> aggregateWindow(every: 1d, fn: last, createEmpty: false) |> yield(name: \"EAE_MIN\")'\n\nvar q1 = ' from(bucket: \"best_cotton\")|> range(start: -5m) |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"iid\"] == \"5001\") |> filter(fn: (r) => r[\"p\"] == \\\"' + plant + '\\\") |> filter(fn: (r) => r[\"d\"] == \\\"' + device + '\\\") |> filter(fn: (r) => r[\"f\"] == \\\"' + field + '\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"EAE\")'\n\n\nmsg.query = q + q1\n//msg.payload={d,d1}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1240,
        "wires": [
            [
                "fe5a0f6d49ce18a2"
            ]
        ]
    },
    {
        "id": "d6919e1099613efc",
        "type": "inject",
        "z": "a11a2520e91d968b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "37f12ecf268966ef"
            ]
        ]
    },
    {
        "id": "49c6cbae18b3b353",
        "type": "debug",
        "z": "a11a2520e91d968b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8057ec4bd8ed745e",
        "type": "influxdb batch",
        "z": "2e5580d30d5651eb",
        "influxdb": "9b0943aea6c60815",
        "precision": "",
        "retentionPolicy": "",
        "name": "solar_eae-day",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microgridfourlakeasia",
        "bucket": "best_cotton",
        "x": 1420,
        "y": 580,
        "wires": []
    },
    {
        "id": "590dcae38f6cd7a3",
        "type": "cronplus",
        "z": "2e5580d30d5651eb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "9fb24d28e60c8da9",
        "type": "template",
        "z": "2e5580d30d5651eb",
        "name": "CSV data",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "plant,measurement,iid,device,field,factor\nIyyermalai,v,4260,B10_INV1_SMU01,IDC,1.0\nIyyermalai,v,4260,B10_INV3_SMU21,IDC,1.0\nIyyermalai,v,4260,B10_INV4_SMU32,IDC,1.0",
        "output": "str",
        "x": 140,
        "y": 580,
        "wires": [
            [
                "1b9c80f313c7ecd4"
            ]
        ]
    },
    {
        "id": "1b9c80f313c7ecd4",
        "type": "csv",
        "z": "2e5580d30d5651eb",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 270,
        "y": 580,
        "wires": [
            [
                "4abfd1aae911ade6"
            ]
        ]
    },
    {
        "id": "4abfd1aae911ade6",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "function 147",
        "func": "\nvar plant = msg.payload.plant;\n//var iid = msg.payload.iid;\nvar device = msg.payload.device;\nvar field = msg.payload.field;\nvar measurement = msg.payload.measurement;\nvar factor = msg.payload.factor;\n\nvar $today = new Date();\nvar d = new Date($today);\nd.setDate($today.getDate());\nd.setHours(0, 0, 0, 0);\nvar d1 = new Date($today);\nvar tstart = new Date(d).toISOString();\nvar tend = new Date(d1).toISOString();\n\n\n\n//var q = ' from(bucket: \"hysolwin\") |> range(start:-10d)  |>filter(fn: (r)=>r[\"_measurement\"]== \\\"' + measurement + '\\\")|>filter(fn:(r)=>r[\"p\"]== \\\"' + plant + '\\\")|>filter(fn:(r)=>r[\"dt\"]== \\\"' + device + '\\\")|>filter(fn:(r)=>r[\"f\"]== \\\"' + field + '\\\") |> aggregateWindow(every: 5m, fn: last, createEmpty: false)|>yield(name:\"last\")'\n//var q = ' from(bucket: \"tata\")|> range(start: -20m) |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \\\"' + plant + '\\\") |> filter(fn: (r) => r[\"iid\"] == \"4251\") |> filter(fn: (r) => r[\"d\"] == \\\"' + device + '\\\") |> filter(fn: (r) => r[\"f\"] == \\\"' + field +'\\\") |> filter(fn: (r) => r[\"_field\"] == \"value\")  |> aggregateWindow(every: 5m,fn: last,)|> fill(column: \"_value\", usePrevious: true) |> yield(name: \"last\")'\n\nvar q1 =' from(bucket: \"tata\") |> range(start: -10m) |> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\") |> filter(fn: (r) => r[\"b\"] == \"B60\") |> filter(fn: (r) => r[\"d\"] = ~ /SMU/ or r[\"d\"] != \"B10_INV2_SMU13\" or r[\"d\"] != \"B10_INV3_SMU21\" or r[\"d\"] != \"B10_INV4_SMU31\") |> filter(fn: (r) => r[\"f\"] == \"IDC\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> yield(name: \"COMM\") '\nmsg.query = q1\n//msg.payload={d,d1}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "19ee8324677c654b",
                "83d0ee38009ad68e"
            ]
        ]
    },
    {
        "id": "19ee8324677c654b",
        "type": "influxdb in",
        "z": "2e5580d30d5651eb",
        "influxdb": "9b0943aea6c60815",
        "name": "cal",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 590,
        "y": 580,
        "wires": [
            [
                "343f218f2fd0e481"
            ]
        ]
    },
    {
        "id": "1f50d26ccbc2d25e",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "function 148",
        "func": "for (var i = (msg.payload.length - 1); i < msg.payload.length; i++) {\n    //var dateUTC = new Date(msg.payload[i]._time).getTime(); \n\n    var obj = {};\n    obj.payload = [{\n        measurement:msg.payload[0]._measurement,\n        fields: {\n            value: msg.payload[i]._value,\n            text: \"0\",\n            qu: \"0\"\n        },\n        tags: {\n            b: msg.payload[i].b,\n            bd: msg.payload[i].d,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            u: msg.payload[i].u\n        },\n        timestamp: msg.payload[i]._time\n    }];\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 580,
        "wires": [
            [
                "d68ca6394dd20ce4"
            ]
        ]
    },
    {
        "id": "d68ca6394dd20ce4",
        "type": "join",
        "z": "2e5580d30d5651eb",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "12",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 910,
        "y": 580,
        "wires": [
            [
                "b7076c911afd426c"
            ]
        ]
    },
    {
        "id": "b7076c911afd426c",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "function 149",
        "func": "let plantObj\n\nplantObj = []\n\n//for (var i = 0; i < msg.payload.length; i++) {\n    var time0 = (msg.payload[0][0].timestamp).slice(0,16)\n    var time1 = (msg.payload[1][0].timestamp).slice(0,16)\n    var time2 = (msg.payload[2][0].timestamp).slice(0,16)\n    var time3 = (msg.payload[3][0].timestamp).slice(0,16)\n    var time4 = (msg.payload[4][0].timestamp).slice(0,16)\n    var time5 = (msg.payload[5][0].timestamp).slice(0,16)\n    var time6 = (msg.payload[6][0].timestamp).slice(0,16)\n    var time7 = (msg.payload[7][0].timestamp).slice(0,16)\n    var time8 = (msg.payload[8][0].timestamp).slice(0,16)\n    var time9 = (msg.payload[9][0].timestamp).slice(0,16)\n    var time10 = (msg.payload[10][0].timestamp).slice(0,16)\n    var time11 = (msg.payload[11][0].timestamp).slice(0,16)\n    var inv01 = msg.payload[0][0].fields.value\n    var inv02 = msg.payload[1][0].fields.value \n    var inv03 = msg.payload[2][0].fields.value\n    var inv04 = msg.payload[3][0].fields.value\n    var inv05 = msg.payload[4][0].fields.value\n    var inv06 = msg.payload[5][0].fields.value\n    var inv07 = msg.payload[6][0].fields.value\n    var inv08 = msg.payload[7][0].fields.value\n    var inv09 = msg.payload[8][0].fields.value\n    var inv10 = msg.payload[9][0].fields.value\n    var inv11 = msg.payload[10][0].fields.value\n    var inv12 = msg.payload[11][0].fields.value\n\n    if ((time0 == time1 && time2 && time3 && time4 && time5 && time6 && time7 && time8 && time9 && time10 && time11)) {\n        {\n            var inv_day = inv01 + inv02 + inv03 + inv04 + inv05 + inv06 + inv07 + inv08 + inv09 + inv10 + inv11 + inv12\n            var obj = {\n                TIME: msg.payload[0][0].timestamp, time0,\n                inv01,\n                inv02,\n                inv03,\n                inv04,\n                inv05,\n                inv06,\n                inv07,\n                inv08,\n                inv09,\n                inv10,\n                inv11,\n                inv12,\n                inv_day\n            }\n\n            plantObj.push(obj)\n        }\n    }\n//}\nmsg.payload = plantObj\n//return null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "e446dd0e4dd80375"
            ]
        ]
    },
    {
        "id": "e446dd0e4dd80375",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "data",
        "func": "\nfor (var i = 0; i < msg.payload.length; i++) {\n    var inv_day = msg.payload[i].inv_day\n    \n    var epoch1 = new Date(msg.payload[i].TIME).getTime()\n    var epoch = (epoch1 - 300000);\n    //var dateUTC1 = new Date(epoch).toISOString().slice(0, 19);\n    //var time = dateUTC1 + 'Z';\n\n    var obj = {};\n    obj.payload =\n\n        [\n            {\n                measurement: \"solar_EAE_DAY\",\n\n                fields: {\n\n                    value: inv_day\n                    \n                },\n                tags: {\n                    p: \"Bestcotton2\",\n                    f: \"solar_day\"\n\n\n                },\n\n                timestamp: epoch\n            }\n        ];\n\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "74a530cbd8ea5c17",
        "type": "debug",
        "z": "2e5580d30d5651eb",
        "name": "debug 116",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 700,
        "wires": []
    },
    {
        "id": "7a03d7a1d2784273",
        "type": "inject",
        "z": "2e5580d30d5651eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "4abfd1aae911ade6"
            ]
        ]
    },
    {
        "id": "343f218f2fd0e481",
        "type": "debug",
        "z": "2e5580d30d5651eb",
        "name": "debug 1275",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 520,
        "wires": []
    },
    {
        "id": "83d0ee38009ad68e",
        "type": "debug",
        "z": "2e5580d30d5651eb",
        "name": "debug 1276",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 420,
        "wires": []
    },
    {
        "id": "a96f31f29604b123",
        "type": "inject",
        "z": "2e5580d30d5651eb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 840,
        "wires": [
            [
                "fc6dcb259f551610"
            ]
        ]
    },
    {
        "id": "fc6dcb259f551610",
        "type": "influxdb in",
        "z": "2e5580d30d5651eb",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": " // from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"IGBT_TEMP\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"IGBT_TEMP\")\n\n//from(bucket: \"tata\")|> range(start:  -1d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] =~ /_INV1/)|> filter(fn: (r) => r[\"f\"] == \"EAE_DAY\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"EAE_DAY\")\n\n//from(bucket: \"tata\")|> range(start:  -5d)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] =~ /B0/)|> filter(fn: (r) => r[\"d\"] !~ /SMU/)|> filter(fn: (r) => r[\"d\"] =~ /_INV/)|> filter(fn: (r) => r[\"f\"] == \"COMMUNICATION_STATUS\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")\n\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B60\")|> filter(fn: (r) => r[\"d\"] =~ /SMU/ or r[\"d\"] != \"B10_INV2_SMU13\" or r[\"d\"] != \"B10_INV3_SMU21\" or r[\"d\"] != \"B10_INV4_SMU31\") |>filter(fn: (r) => r[\"f\"] == \"IDC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"COMM\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 500,
        "y": 800,
        "wires": [
            [
                "c4595185af07b8da"
            ]
        ]
    },
    {
        "id": "eeeabd45794fb8d7",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj = [];\n\n// Initialize max1 to a very small value so that the first value is always greater\nlet max2 = Number.MIN_SAFE_INTEGER;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var COMM = msg.payload[i]._value;\n\n  // Update max1 if the current value is greater\n  max2 = Math.max(max2, COMM);\n\n  var obj1 = {\n    time,\n    b,\n    bd,\n    d,\n    dd,\n    dt,\n    f,\n    fd,\n    h,\n    iid,\n    m,\n    p,\n    u,\n    COMM,\n    max2\n  };\n\n  plantObj.push(obj1);\n}\n\nmsg.payload = plantObj;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 900,
        "wires": [
            [
                "4a7e13cdade31e0b",
                "dff32364a60dbdd0"
            ]
        ]
    },
    {
        "id": "4a7e13cdade31e0b",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "value field",
        "func": "\nlet plantObj\nplantObj = []\n\nfor (var i = 0; i < msg.payload.length; i++)\n {\n\n    var value = msg.payload[i].max2\n   var tag = \"max2\"\n   var time = new Date(msg.payload[i].time).getTime();\n    var b = msg.payload[i].b;\n    var bd = msg.payload[i].d;\n    var d = msg.payload[i].d;\n    var dd = msg.payload[i].dd;\n    var dt = msg.payload[i].dt;\n    var f = msg.payload[i].f;\n   var fd = \"max2\";\n    var h = msg.payload[i].h;\n    var iid = msg.payload[i].iid;\n    var m = msg.payload[i].m;\n    var p = msg.payload[i].p;\n    var u = msg.payload[i].u;\n\n\n\n var obj1 =\n {\n time,\n b,\n bd,\n d,\n dd,\n dt,\n f,\n fd,\n h,\n iid,\n m,\n p,\n u,\n value,\n tag\n\n }\n plantObj.push(obj1)\n\n \n}\n\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 900,
        "wires": [
            [
                "c9ef6a0875c5330d"
            ]
        ]
    },
    {
        "id": "c9ef6a0875c5330d",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "influx table",
        "func": "\n\nfor (var i = 0 ; i < msg.payload.length; i++) {\n      // var dateUTC = new Date(msg.payload[i].time).getTime();\n       var obj = {};\n    \n    obj.payload =\n        [\n {\n measurement: \"MAX\",\n \n fields: {\n\n value: msg.payload[i].value,\n text:\"0\",\n qu:\"0\"\n\n },\n tags: {\n b : msg.payload[i].b,\n bd : msg.payload[i].d,\n d :msg.payload[i].d,\n dd : msg.payload[i].dd,\n dt : msg.payload[i].dt,\n f :msg.payload[i].tag,\n fd : msg.payload[i].fd,\n h :msg.payload[i].h,\n iid : msg.payload[i].iid,\n m : msg.payload[i].m,\n p : msg.payload[i].p,\n u : msg.payload[i].u\n \n\n },\n\ntimestamp: msg.payload[i].time\n//time: dateUTC \n }\n ];\n\n //plantObj.push(obj)\n node.send(obj);\n}\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c4595185af07b8da",
        "type": "debug",
        "z": "2e5580d30d5651eb",
        "name": "debug 1277",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 780,
        "wires": []
    },
    {
        "id": "05a369d48dca4a1f",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "function 421",
        "func": "let plantObj\n\nplantObj = []\n\n//for (var i = 0; i < msg.payload.length; i++) {\n    var time0 = (msg.payload[0][0].timestamp).slice(0,16)\n    var time1 = (msg.payload[1][0].timestamp).slice(0,16)\n    var time2 = (msg.payload[2][0].timestamp).slice(0,16)\n    var time3 = (msg.payload[3][0].timestamp).slice(0,16)\n    var time4 = (msg.payload[4][0].timestamp).slice(0,16)\n    var time5 = (msg.payload[5][0].timestamp).slice(0,16)\n    var time6 = (msg.payload[6][0].timestamp).slice(0,16)\n    var time7 = (msg.payload[7][0].timestamp).slice(0,16)\n    var time8 = (msg.payload[8][0].timestamp).slice(0,16)\n    var time9 = (msg.payload[9][0].timestamp).slice(0,16)\n    var time10 = (msg.payload[10][0].timestamp).slice(0,16)\n    var time11 = (msg.payload[11][0].timestamp).slice(0,16)\n    var inv01 = msg.payload[0][0].fields.value\n    var inv02 = msg.payload[1][0].fields.value \n    var inv03 = msg.payload[2][0].fields.value\n    var inv04 = msg.payload[3][0].fields.value\n    var inv05 = msg.payload[4][0].fields.value\n    var inv06 = msg.payload[5][0].fields.value\n    var inv07 = msg.payload[6][0].fields.value\n    var inv08 = msg.payload[7][0].fields.value\n    var inv09 = msg.payload[8][0].fields.value\n    var inv10 = msg.payload[9][0].fields.value\n    var inv11 = msg.payload[10][0].fields.value\n    var inv12 = msg.payload[11][0].fields.value\n\n    if ((time0 == time1 && time2 && time3 && time4 && time5 && time6 && time7 && time8 && time9 && time10 && time11)) {\n        {\n            var inv_day = inv01 + inv02 + inv03 + inv04 + inv05 + inv06 + inv07 + inv08 + inv09 + inv10 + inv11 + inv12\n            var obj = {\n                TIME: msg.payload[0][0].timestamp, time0,\n                inv01,\n                inv02,\n                inv03,\n                inv04,\n                inv05,\n                inv06,\n                inv07,\n                inv08,\n                inv09,\n                inv10,\n                inv11,\n                inv12,\n                inv_day\n            }\n\n            plantObj.push(obj)\n        }\n    }\n//}\nmsg.payload = plantObj\n//return null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 700,
        "wires": [
            [
                "74a530cbd8ea5c17"
            ]
        ]
    },
    {
        "id": "dff32364a60dbdd0",
        "type": "function",
        "z": "2e5580d30d5651eb",
        "name": "function 422",
        "func": "for (var i = (msg.payload.length - 1); i < msg.payload.length; i++) {\n    //var dateUTC = new Date(msg.payload[i]._time).getTime(); \n\n    var obj = {};\n    obj.payload = [{\n        measurement:msg.payload[0]._measurement,\n        fields: {\n            value: msg.payload[i]._value,\n            text: \"0\",\n            qu: \"0\"\n        },\n        tags: {\n            b: msg.payload[i].b,\n            bd: msg.payload[i].d,\n            d: msg.payload[i].d,\n            dd: msg.payload[i].dd,\n            dt: msg.payload[i].dt,\n            f: msg.payload[i].f,\n            fd: msg.payload[i].fd,\n            h: msg.payload[i].h,\n            iid: msg.payload[i].iid,\n            m: msg.payload[i].m,\n            p: msg.payload[i].p,\n            u: msg.payload[i].u\n        },\n        timestamp: msg.payload[i]._time\n    }];\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 700,
        "wires": [
            [
                "05a369d48dca4a1f"
            ]
        ]
    },
    {
        "id": "c22c205aa85af4cd",
        "type": "cronplus",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 320,
        "wires": [
            [
                "83f32fa0cfa251d8"
            ]
        ]
    },
    {
        "id": "83f32fa0cfa251d8",
        "type": "influxdb in",
        "z": "bcbbcd5945eaace7",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": "//  from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] == \"B01_INV1\")|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PAC\")\n//from(bucket: \"best_cotton\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \"best_cotton_1MW\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PDC\")\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B01\")|> filter(fn: (r) => r[\"d\"] =~ /B01_INV/ and r[\"d\"] !~ /_SMU/) |>filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PAC\")\n\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "41fe38321e541319"
            ]
        ]
    },
    {
        "id": "f7c0c5f992db0e55",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar PACAVG;\nvar AVG_Alarm;\nvar PAC1;\nvar PAC2;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var PAC = msg.payload[i]._value;\n  {\n    sum = sum += msg.payload[i]._value\n    PACAVG = sum / msg.payload.length\n    PAC1 = PACAVG - (0.1 * PACAVG)\n    PAC2 = PACAVG + (0.1 * PACAVG)\n\n    if (PAC < PAC1) {\n      AVG_Alarm = 1\n    } else if (PAC > PAC2) {\n      AVG_Alarm = 2\n    }\n    else {\n      AVG_Alarm = 0\n    }\n  //  flow.set(\"PACAVG\", PACAVG)\n  }\n}\n\n\n \n  var b = \"B01\";\n   var d = \"B01_INV\";\n  var f = \"AVG_ALARM\";\n   {\n   \n  \n    var obj1 =\n    {\n      time,\n      b,\n        d,\n      f,\n      PAC,\n      PAC1,\n      PAC2,\n      PACAVG,\n      AVG_Alarm\n\n    }\n    plantObj.push(obj1)\n\n  }\n\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3ea5fd3d1e99aab3",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1280",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "dd7598faa2c5af59",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "data",
        "func": "//var plantObj = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    var dateUTC = new Date(msg.payload[i].time).getTime();\n    var obj = {};\n    obj.payload = [{\n        measurement: \"ALARM\",\n        fields: {\n            PACAVG: msg.payload[i].PACAVG,\n            AVG_Alarm: msg.payload[i].AVG_Alarm,\n            PACSUM: msg.payload[i].PACSUM,\n            PAC: msg.payload[i].PAC,\n            PACA: msg.payload[i].PACA,\n        },\n        tags: {\n            b: msg.payload[i].b,\n            d: msg.payload[i].d,\n       \n\n        },\n        timestamp: dateUTC\n    }];\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 320,
        "wires": [
            [
                "3ea5fd3d1e99aab3"
            ]
        ]
    },
    {
        "id": "a1fa11c54cb37ae3",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar IDCAVG;\n\nfor (var i = 0; i <= msg.payload.length - 1; i++) {\n\n  var time = msg.payload[i]._time;\n  var IDC = msg.payload[i]._value;\n  {\n    sum = sum += msg.payload[i]._value\n    IDCAVG = sum \n //   flow.set(\"IGBTAVG\", IDCAVG)\n  }\n}\n\n\n  var b = \"B01\";\n  var d = \"B01_INV1\";\n   var f = \"IDCAVG\";\n \n  \n   \n\n    var obj1 =\n    {\n      time,\n      b,\n    \n      d,\n       f,\n     IDC,\n      IDCAVG\n\n\n    }\n    plantObj.push(obj1)\n\n  \n\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f3211959874fb216",
        "type": "ui_gauge",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "group": "",
        "order": 3,
        "format": "{{msg.payload.main.temp}}",
        "min": 0,
        "max": "50",
        "x": 1910,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4e1eeadcfb75b9c4",
        "type": "influxdb in",
        "z": "bcbbcd5945eaace7",
        "influxdb": "c006a6cbdf4a6746",
        "name": "testdb 2.0",
        "query": "//  from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] == \"B01_INV1\")|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PAC\")\n//from(bucket: \"best_cotton\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \"best_cotton_1MW\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PDC\")\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B01\")|> filter(fn: (r) => r[\"d\"] =~ /B01_INV/ or r[\"d\"] !~ /_SMU/) |>filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PAC\")\n\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "microgridfourlakeasia",
        "x": 100,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1c1958efeb6ca4e3",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar PACAVG;\nvar PACSUM;\n\nfor (var i = 0; i <= msg.payload.length - 1; i++) {\n\n  var time = msg.payload[i]._time;\n  var IDC = msg.payload[i]._value;\n  {\n    sum = sum += msg.payload[i]._value\n    PACAVG = sum / msg.payload.length\n    flow.set(\"IGBTAVG\", PACAVG)\n  }\n}\n\n\n  var b = \"B01\";\n  var d = \"B01_INV1\";\n   var f = \"IDCAVG\";\n \n  \n   \n\n    var obj1 =\n    {\n      time,\n      b,\n    \n      d,\n       f,\n     IDC,\n      PACAVG\n\n\n    }\n    plantObj.push(obj1)\n\n  \n\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "602d5c1feeef46de",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "data",
        "func": "//var plantObj = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    var dateUTC = new Date(msg.payload[i].time).getTime();\n    var obj = {};\n    obj.payload = [{\n        measurement: \"ALARM\",\n        fields: {\n            PACAVG: msg.payload[i].PACAVG,\n            PACSUM: msg.payload[i].PACSUM,\n       \n        },\n        tags: {\n            b: msg.payload[i].b,\n            d: msg.payload[i].d,\n       \n\n        },\n        timestamp: dateUTC\n    }];\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 90,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "0b103c12b026d555",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar PACAVG;\nvar PACSUM;\n\nfor (var i = 0; i <= msg.payload.length - 1; i++) {\n\n  var time = msg.payload[i]._time;\n  var PAC = msg.payload[i]._value;\n  {\n    sum = sum += msg.payload[i]._value\n    PACAVG = sum / msg.payload.length\n    PACSUM = sum\n    flow.set(\"IGBTAVG\", PACAVG)\n  }\n}\n\n  var b = \"B01\";\n  var d= \"B01_INV\";\n   var f = \"IDCAVG\";\n     var obj1 =\n    {\n      time,\n      b,\n      d,\n      f,\n       PAC,\n       PACSUM,\n       PACAVG\n\n\n    }\n    plantObj.push(obj1)\n\n  \n\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "41fe38321e541319",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar PACAVG;\nvar AVG_Alarm;\nvar PAC1;\nvar PAC2;\nvar PACSUM;\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var PAC = msg.payload[i]._value;\n  {\n    sum = sum += msg.payload[i]._value\n    PACAVG = sum / msg.payload.length\n    PAC1 = PACAVG - (0.1 * PACAVG)\n    PAC2 = PACAVG + (0.1 * PACAVG)\n    PACSUM = sum\n    \n    \n\n\n  }\n}\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var PAC = msg.payload[i]._value;\n  var PACA = msg.payload[i]._value - PACAVG;\n  var Percentage = (msg.payload[i]._value / PACAVG )* 100\n  {\n    if (PAC < PAC1) {\n      AVG_Alarm = 1\n    } else if (PAC > PAC2) {\n      AVG_Alarm = 2\n    }\n    else {\n      AVG_Alarm = 0\n    }\n\n    var obj1 =\n    {\n      time,\n      b,\n      bd,\n      d,\n      dd,\n      dt,\n      f,\n      fd,\n      h,\n      iid,\n      m,\n      p,\n      u,\n      PAC,\n      PACA,\n      PAC1,\n      PAC2,\n      PACAVG,\n      PACSUM,\n      Percentage,\n      AVG_Alarm\n\n    }\n    plantObj.push(obj1)\n\n  }\n}\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "dd7598faa2c5af59",
                "0e49a957e724a87a"
            ]
        ]
    },
    {
        "id": "084c6c310e7f7a8e",
        "type": "comment",
        "z": "bcbbcd5945eaace7",
        "name": "Avg Calculcation_INVs",
        "info": "",
        "x": 200,
        "y": 240,
        "wires": []
    },
    {
        "id": "97ed735eb270b35c",
        "type": "influxdb in",
        "z": "bcbbcd5945eaace7",
        "influxdb": "d69f1381f18dd281",
        "name": "testdb 2.0",
        "query": "//  from(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"d\"] == \"B01_INV1\")|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PAC\")\n//from(bucket: \"best_cotton\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"bd\"] == \"best_cotton_1MW\")|> filter(fn: (r) => r[\"d\"] =~ /INV/)|> filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"PDC\")\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B01\")|> filter(fn: (r) => r[\"d\"] == \"B01_HTP_EM\") |>filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"HTP\")\n\nfrom(bucket: \"tata\")|> range(start:  -5m)|> filter(fn: (r) => r[\"_measurement\"] == \"v\") |> filter(fn: (r) => r[\"p\"] == \"Iyyermalai\")|> filter(fn: (r) => r[\"b\"] == \"B01\")|> filter(fn: (r) => r[\"d\"] =~ /B01_INV/ and r[\"d\"] !~ /_SMU/) |>filter(fn: (r) => r[\"f\"] == \"PAC\")|> filter(fn: (r) => r[\"_field\"] == \"value\")|> yield(name: \"INV\")\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "largeutilitylakeasia",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "87dcaedabc514940",
                "ebb57a91f650f768"
            ]
        ]
    },
    {
        "id": "96b3cd1e25475fbd",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar PACAVG;\nvar AVG_Alarm;\nvar PAC1;\nvar PAC2;\nvar PACSUM;\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var PAC = msg.payload[i]._value;\n  {\n    sum = sum += msg.payload[i]._value\n    PACAVG = sum / msg.payload.length\n    PAC1 = PACAVG - (0.1 * PACAVG)\n    PAC2 = PACAVG + (0.1 * PACAVG)\n    PACSUM = sum\n  //  flow.set(\"PACAVG\", PACAVG)\n  }\n}\n\nfor (var i = 0; i < msg.payload.length; i++) {\n  var time = msg.payload[i]._time;\n  var b = msg.payload[i].b;\n  var bd = msg.payload[i].d;\n  var d = msg.payload[i].d;\n  var dd = msg.payload[i].dd;\n  var dt = msg.payload[i].dt;\n  var f = msg.payload[i].f;\n  var fd = msg.payload[i].fd;\n  var h = msg.payload[i].h;\n  var iid = msg.payload[i].iid;\n  var m = msg.payload[i].m;\n  var p = msg.payload[i].p;\n  var u = msg.payload[i].u;\n  var PAC = msg.payload[i]._value;\n  {\n    if (PAC < PAC1  )\n     {\n      AVG_Alarm = 1\n    } else if ( PAC > PAC2) {\n      AVG_Alarm = 2\n    }\n         else {\n      AVG_Alarm = 0\n    }\n  \n    var obj1 =\n    {\n      time,\n      b,\n      bd,\n      d,\n      dd,\n      dt,\n      f,\n      fd,\n      h,\n      iid,\n      m,\n      p,\n      u,\n      PAC,\n      PAC1,\n      PAC2,\n      PACAVG,\n      PACSUM,\n      AVG_Alarm\n\n    }\n    plantObj.push(obj1)\n\n  }\n}\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "87dcaedabc514940",
        "type": "split",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "splt": "/n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 440,
        "wires": [
            [
                "9474dcd410922209"
            ]
        ]
    },
    {
        "id": "9474dcd410922209",
        "type": "switch",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "property": "payload.result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INV",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "HTP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 440,
        "wires": [
            [
                "e1d8d70b0bffe9d9"
            ],
            [
                "282dab98633389c8"
            ]
        ]
    },
    {
        "id": "e1d8d70b0bffe9d9",
        "type": "join",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "27c2a4e675b1023d"
            ]
        ]
    },
    {
        "id": "282dab98633389c8",
        "type": "join",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "92319c91f0c6e8d8"
            ]
        ]
    },
    {
        "id": "92319c91f0c6e8d8",
        "type": "change",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "HTP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "ebb3aa5bc14f66f1",
                "57c8246ec2a0bd7a"
            ]
        ]
    },
    {
        "id": "27c2a4e675b1023d",
        "type": "change",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "INV",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 400,
        "wires": [
            [
                "ebb3aa5bc14f66f1",
                "7cb6d86ebbc6482b"
            ]
        ]
    },
    {
        "id": "ebb3aa5bc14f66f1",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "combine",
        "func": "context.data = context.data || {};\nswitch (msg.topic) {\n    case \"INV\":\n        context.data.INV = msg.payload;\n        msg = null;\n        break;\n    case \"HTP\":\n        context.data.HTP = msg.payload;\n        msg = null;\n        break;\n}\nif (context.data.INV != null && context.data.HTP != null) {\n    var data_combine = {\n        \"INV\": context.data.INV,\n        \"HTP\": context.data.HTP\n\n    }\n    context.data = null\n    return { payload: data_combine };\n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 440,
        "wires": [
            [
                "d271f4aa38af529b"
            ]
        ]
    },
    {
        "id": "d271f4aa38af529b",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "IGBT_Deviation_alarm",
        "func": "let plantObj\nplantObj = []\n\nvar sum = 0\nvar PACSUM;\nvar ALARM_PAC;\nvar PAC_H;\nvar PAC_I;\nfor (var i = 0; i <= msg.payload.INV.length - 1; i++) {\n\n  var time = msg.payload.HTP[0]._time;\n  var HTP_PAC = msg.payload.HTP[0]._value;\n  var INV_PAC = msg.payload.INV[i]._value\n  \n  {\n    sum = sum += msg.payload.INV[i]._value\n    PACSUM = sum/1000\n    PAC_H = Math.abs(HTP_PAC - (0.1 * PACSUM))\n    PAC_I = HTP_PAC + (0.1 * PACSUM)\n\n    if (HTP_PAC < PAC_H) {\n      ALARM_PAC = 1\n    } else if (HTP_PAC > PAC_I) {\n      ALARM_PAC = 2\n    }\n    else {\n      ALARM_PAC = 0\n    }\n //   flow.set(\"IGBTAVG\", IDCAVG)\n  }\n}\n\n  var b = \"B01\";\n  var d = \"B01_HTPEM\";\n  var f = \"AVG_PAC\";\n \n\n \n   \n\n    var obj1 =\n    {\n      time,\n      b,\n       d,\n       f,\n      PAC_H,\n      PAC_I,\n      PACSUM,\n      HTP_PAC,\n      ALARM_PAC\n\n\n    }\n    plantObj.push(obj1)\n\n\n\nmsg.payload = plantObj\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 440,
        "wires": [
            [
                "1076598a7aee30bb",
                "3688dffbb42b6243"
            ]
        ]
    },
    {
        "id": "1a5efe477c73b8ad",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "PR Calculation",
        "func": "let plantObj\nplantObj = []\n\n//var value=0;\nvar t = \"PR\";\nvar PR1 = 0;\nfor (var i = 0; i < msg.payload.topic1.length; i++) {\n       var radiation = msg.payload.radiation._value;\n       var time = msg.payload.topic1[i]._time;\n       var b = msg.payload.topic1[i].b;\n       var bd = msg.payload.topic1[i].bd;\n       var d = msg.payload.topic1[i].d;\n       var dd = msg.payload.topic1[i].dd;\n       var dt = msg.payload.topic1[i].dt;\n       var f = msg.payload.topic1[i].f;\n       var fd = msg.payload.topic1[i].fd;\n       var h = msg.payload.topic1[i].h;\n       var iid = msg.payload.topic1[i].iid;\n       var m = msg.payload.topic1[i].m;\n       var p = msg.payload.topic1[i].p;\n       //var qu = msg.payload[i].qu;\n       //var text = msg.payload[i].text;\n       var u = msg.payload.topic1[i].u;\n       //var value;\n       var pac = msg.payload.topic1[i]._value;\n       {\n\n              PR1 = (((pac * 1000) / 1376) / radiation) * 100\n              var obj1 =\n              {\n                     time,\n                     b,\n                     bd,\n                     d,\n                     dd,\n                     dt,\n                     f,\n                     fd,\n                     h,\n                     iid,\n                     m,\n                     p,\n                     //qu,\n                     //text,\n                     u,\n                     pac,\n                     t,\n                     PR1\n\n              }\n              plantObj.push(obj1)\n       }\n}\nmsg.payload = plantObj\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "58329097c9322c0a",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1285",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 440,
        "wires": []
    },
    {
        "id": "db13775431b505b5",
        "type": "inject",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "57c8246ec2a0bd7a",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1287",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "7cb6d86ebbc6482b",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1288",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "a298776cc6c857ed",
        "type": "cronplus",
        "z": "bcbbcd5945eaace7",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3688dffbb42b6243",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1289",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 380,
        "wires": []
    },
    {
        "id": "ebb57a91f650f768",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1290",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 500,
        "wires": []
    },
    {
        "id": "1076598a7aee30bb",
        "type": "function",
        "z": "bcbbcd5945eaace7",
        "name": "data",
        "func": "//var plantObj = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    var dateUTC = new Date(msg.payload[i].time).getTime();\n    var obj = {};\n    obj.payload = [{\n        measurement: \"ALARM\",\n        fields: {\n           \n            ALARM_PAC: msg.payload[i].ALARM_PAC,\n            PACSUM: msg.payload[i].PACSUM,\n       \n        },\n        tags: {\n            b: msg.payload[i].b,\n            d: msg.payload[i].d, \n             f: msg.payload[i].f,\n       \n\n        },\n        timestamp: dateUTC\n    }];\n    //plantObj.push(obj)\n    node.send(obj);\n}\n\n//msg.payload = plantObj\n\n//return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 480,
        "wires": [
            [
                "58329097c9322c0a"
            ]
        ]
    },
    {
        "id": "0e49a957e724a87a",
        "type": "debug",
        "z": "bcbbcd5945eaace7",
        "name": "debug 1296",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 260,
        "wires": []
    },
    {
        "id": "0aa5dc95e4c2c8ef",
        "type": "http request",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "/get/operation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 610,
        "y": 340,
        "wires": [
            [
                "5803f688b917d7ba"
            ]
        ]
    },
    {
        "id": "5803f688b917d7ba",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1279",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 400,
        "wires": []
    },
    {
        "id": "01bc141c407098c8",
        "type": "http response",
        "z": "05c8bc63a09a3cb4",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 320,
        "wires": []
    },
    {
        "id": "61b67d34814ca233",
        "type": "function",
        "z": "05c8bc63a09a3cb4",
        "name": "function 442",
        "func": "// Decode Base64 and convert to CSV text\nmsg.payload = Buffer.from(msg.payload.split(\",\")[1], 'base64').toString('utf8');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 380,
        "wires": [
            [
                "01bc141c407098c8",
                "71ec2592b74a9a88"
            ]
        ]
    },
    {
        "id": "71ec2592b74a9a88",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1280",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 380,
        "wires": []
    },
    {
        "id": "0d1b3e4521624001",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 640,
        "wires": []
    },
    {
        "id": "806f510137bb4ffb",
        "type": "template",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO public.MGData( \"Sl .No\" , \"Client\" , \"Portal Link\" , \"Installer Username\" , \"i_Password\" , \"Username\", \"Password\" )\nVALUES ( '{{payload.Sl .No}}', '{{payload.Client}}', '{{payload.Portal Link}}',  '{{payload.Installer Username}}',  '{{payload.i_Password}}', '{{payload.Username}}','{{payload.Password}}')",
        "output": "str",
        "x": 1280,
        "y": 740,
        "wires": [
            [
                "0d1b3e4521624001"
            ]
        ]
    },
    {
        "id": "655c43f61fb23b2e",
        "type": "inject",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CREATE TABLE public.MGData( \"Sl .No\" text PRIMARY KEY ,\"Client\" text , \"Site Name\" text, \"Portal Link\" text , \"Installer Username\" text , \"i_Password\" text , \"Username\" text ,\"Password\" text) WITH  (   OIDS=FALSE )",
        "payloadType": "str",
        "x": 650,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4181a9a8779319e6",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1291",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 900,
        "wires": []
    },
    {
        "id": "4587f576a4d9f108",
        "type": "csv",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "0ac9a565d6b9534b"
            ]
        ]
    },
    {
        "id": "eb0e745ce72052e0",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1293",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "0ac9a565d6b9534b",
        "type": "template",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO public.MGData( \"Sl .No\" , \"Client\" , \"Portal Link\" , \"Installer Username\" , \"i_Password\" , \"Username\", \"Password\" )\nVALUES ( '{{payload.Sl .No}}', '{{payload.Client}}', '{{payload.Portal Link}}',  '{{payload.Installer Username}}',  '{{payload.i_Password}}', '{{payload.Username}}','{{payload.Password}}')",
        "output": "str",
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "eb0e745ce72052e0"
            ]
        ]
    },
    {
        "id": "2ad9fe600a393269",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1294",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 720,
        "wires": []
    },
    {
        "id": "17263ae94e28b644",
        "type": "function",
        "z": "05c8bc63a09a3cb4",
        "name": "function 444",
        "func": "// Decode Base64 and convert to CSV text\nmsg.payload = Buffer.from(msg.payload.split(\",\")[1], 'base64').toString('utf8');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 560,
        "wires": [
            [
                "4587f576a4d9f108"
            ]
        ]
    },
    {
        "id": "3204d603fcdc6ad0",
        "type": "http in",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "url": "/dev/post/operation/",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "de6ff13387ef7362",
                "c3dd6aba6157d4eb"
            ]
        ]
    },
    {
        "id": "9eb0db81b2976f06",
        "type": "csv",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 590,
        "y": 840,
        "wires": [
            [
                "39f23710b034a8e3"
            ]
        ]
    },
    {
        "id": "39f23710b034a8e3",
        "type": "template",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO public.MGData( \"Sl .No\" , \"Client\" ,\"Site Name\", \"Portal Link\" , \"Installer Username\" , \"i_Password\" , \"Username\", \"Password\" )\nVALUES ( '{{payload[\"Sl .No\"]}}', '{{payload[\"Client\"]}}', '{{payload[\"Site Name\"]}}','{{payload[\"Portal Link\"]}}',  '{{payload[\"Installer Username\"]}}',  '{{payload[\"i_Password\"]}}', '{{payload[\"Username\"]}}','{{payload[\"Password\"]}}')",
        "output": "str",
        "x": 720,
        "y": 800,
        "wires": [
            [
                "e538fe47e5e22082",
                "b8086d60ca968aeb"
            ]
        ]
    },
    {
        "id": "e538fe47e5e22082",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1295",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 740,
        "wires": []
    },
    {
        "id": "b8086d60ca968aeb",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1297",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 960,
        "wires": []
    },
    {
        "id": "0f6ac08e7355b973",
        "type": "http request",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "/get/operation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 720,
        "wires": [
            [
                "2ad9fe600a393269"
            ]
        ]
    },
    {
        "id": "e0d2ebd20f6490b7",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1293",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 980,
        "wires": []
    },
    {
        "id": "2be7b243a9bce9b2",
        "type": "function",
        "z": "05c8bc63a09a3cb4",
        "name": "Injection",
        "func": "// Assuming msg.payload is an object with the necessary properties\n\nvar query = `\n  INSERT INTO public.MGData ( \"Sl .No\" , \"Client\" ,\"Site Name\", \"Portal Link\" , \"Installer Username\" , \"i_Password\" , \"Username\", \"Password\" ) VALUES (\n    '${msg.payload[\"Sl .No\"]}',\n    '${msg.payload[\"Client\"]}',\n    '${msg.payload[\"Site Name\"]}',\n    '${msg.payload[\"Portal Link\"]}',\n    '${msg.payload[\"Installer Username\"]}',\n    '${msg.payload[\"i_Password\"]}',\n    '${msg.payload[\"Username\"]}',\n    '${msg.payload[\"Password\"]}'\n  )\n`;\n\n// Log the query for debugging purposes\nconsole.log(query);\n\n// Return the modified message\nmsg.topic = \"INSERT_QUERY\";\nmsg.payload = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 920,
        "wires": [
            [
                "1f06c382e7f4655f"
            ]
        ]
    },
    {
        "id": "7e068aa895e86285",
        "type": "inject",
        "z": "05c8bc63a09a3cb4",
        "name": "Create table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CREATE TABLE public.SDF_Grafana_Test(   \"Site Name\" text,   \"Capacity\" numeric,   \"Capacity Unit\" text,   \"No of Inverter\" numeric,   \"Inverter Make\" text,   \"Inverter Type\" text,   \"Mode of Communication\" text,   \"No of MFM\" numeric,   \"No of Solar MFM\" numeric,   \"No of Grid MFM\" numeric,   \"No of DG MFM\" numeric,   \"No of Di's\" numeric,   \"No of Do's\" numeric,   \"No of Ai's\" numeric,   \"Annuciator\" numeric,   \"Relay\" numeric, \"SMU Make\" text,   \"SMU Model\" text,   \"No of SMU\" numeric,   \"WMS Make\" text,   \"Sensors to be Monitored\" text,   \"Customer Name\" text,   \"Customer Number\" numeric,   \"Service Needed\" text );",
        "payloadType": "str",
        "x": 970,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "1f06c382e7f4655f",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1294",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1020,
        "wires": []
    },
    {
        "id": "36b40e559d754c48",
        "type": "base64",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 400,
        "y": 820,
        "wires": [
            [
                "9eb0db81b2976f06",
                "e0d2ebd20f6490b7"
            ]
        ]
    },
    {
        "id": "679437ffa199ff5f",
        "type": "http in",
        "z": "05c8bc63a09a3cb4",
        "name": "/upload",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 90,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "11769a03634a7a10",
        "type": "file",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "filename": "/desktop/uploaded.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 600,
        "y": 1100,
        "wires": [
            [
                "bde1d4f5c5e799e8"
            ]
        ]
    },
    {
        "id": "bde1d4f5c5e799e8",
        "type": "http response",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 1080,
        "wires": []
    },
    {
        "id": "0ab23ea6b4d3278a",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1299",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "8de682d9fb2006bc",
        "type": "file in",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 220,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "de6ff13387ef7362",
        "type": "debug",
        "z": "05c8bc63a09a3cb4",
        "name": "debug 1300",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d6e0a99b3d17f6e2",
        "type": "http in",
        "z": "05c8bc63a09a3cb4",
        "name": "/upload",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 550,
        "y": 1280,
        "wires": [
            [
                "dae1e928efa7bd71"
            ]
        ]
    },
    {
        "id": "dae1e928efa7bd71",
        "type": "base64",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 700,
        "y": 1280,
        "wires": [
            [
                "5bfb237691fef403"
            ]
        ]
    },
    {
        "id": "5bfb237691fef403",
        "type": "function",
        "z": "05c8bc63a09a3cb4",
        "name": "Convert to Buffer",
        "func": "var bufferData = Buffer.from(msg.payload, 'base64');\nmsg.payload = bufferData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1280,
        "wires": [
            [
                "fd155b4b14d40d5b"
            ]
        ]
    },
    {
        "id": "fd155b4b14d40d5b",
        "type": "file",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "filename": "/path/to/your/desktop/uploaded.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1100,
        "y": 1280,
        "wires": [
            [
                "339403dfc78bc45c"
            ]
        ]
    },
    {
        "id": "339403dfc78bc45c",
        "type": "http response",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c3dd6aba6157d4eb",
        "type": "function",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "func": "// Decode Base64 and convert to CSV text\nmsg.payload = Buffer.from(msg.payload.split(\",\")[1], 'base64').toString('utf8');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "11769a03634a7a10",
                "3758418aef3d3450"
            ]
        ]
    },
    {
        "id": "c396879d52bdb046",
        "type": "http request",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "/dev/get/operation",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 1040,
        "wires": [
            [
                "de6ff13387ef7362"
            ]
        ]
    },
    {
        "id": "3758418aef3d3450",
        "type": "csv",
        "z": "05c8bc63a09a3cb4",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 450,
        "y": 1180,
        "wires": [
            [
                "0ab23ea6b4d3278a"
            ]
        ]
    },
    {
        "id": "7ec7b5e9a0679a3e",
        "type": "ui_form",
        "z": "0fd935399108894e",
        "name": "",
        "label": "",
        "group": "3ad2bc4a7ed3c9a3",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Site Name",
                "value": "Site Name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Capacity",
                "value": "Capacity",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "kW",
                "value": "kW",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "MW",
                "value": "MW",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Plant Loaction",
                "value": "Plant Loaction",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "No of Inverter",
                "value": "No of Inverter",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Inverter Make",
                "value": "Inverter Make",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "No of MFM",
                "value": "No of MFM",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "No of Solar MFM",
                "value": "No of Solar MFM",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "No of Grid MFM",
                "value": "No of Grid MFM",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "No of DG MFM",
                "value": "No of DG MFM",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "No of DI's",
                "value": "No of DI's",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "No of DO's",
                "value": "No of DO's",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "PV+ZE",
                "value": "PV+ZE",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "PV+DG",
                "value": "PV+DG",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "PV+DG+ZE",
                "value": "PV+DG+ZE",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "PV+RMS",
                "value": "PV+RMS",
                "type": "switch",
                "required": false,
                "rows": null
            },
            {
                "label": "Contact Number",
                "value": "Contact Number",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Site Name": "",
            "Capacity": "",
            "kW": false,
            "MW": false,
            "Plant Loaction": "",
            "No of Inverter": "",
            "Inverter Make": "",
            "No of MFM": "",
            "No of Solar MFM": "",
            "No of Grid MFM": "",
            "No of DG MFM": "",
            "No of DI's": "",
            "No of DO's": "",
            "PV+ZE": false,
            "PV+DG": false,
            "PV+DG+ZE": false,
            "PV+RMS": false,
            "Contact Number": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "282d0d909a8352f7"
            ]
        ]
    },
    {
        "id": "282d0d909a8352f7",
        "type": "debug",
        "z": "0fd935399108894e",
        "name": "debug 110",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 420,
        "wires": []
    },
    {
        "id": "978ecfc301d0d118",
        "type": "function",
        "z": "0fd935399108894e",
        "name": "function 443",
        "func": "var buf = Buffer.from(msg.payload);\nmsg.payload = buf;\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 420,
        "wires": [
            [
                "282d0d909a8352f7",
                "fa34350fb58f0401"
            ]
        ]
    },
    {
        "id": "fa34350fb58f0401",
        "type": "csv",
        "z": "0fd935399108894e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 570,
        "y": 620,
        "wires": [
            [
                "2e4748bb409e3011",
                "e2f267c5036d881b"
            ]
        ]
    },
    {
        "id": "b0e1c8da1c3974db",
        "type": "debug",
        "z": "0fd935399108894e",
        "name": "debug 1281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 600,
        "wires": []
    },
    {
        "id": "2e4748bb409e3011",
        "type": "template",
        "z": "0fd935399108894e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO public.SDF_Test( \"Site Name\" , \"Capacity\" , \"kW\" , \"MW\" , \"Plant Loaction\" , \"No of Inverter\", \"Inverter Make\", \"No of MFM\", \"No of Solar MFM\", \"No of Grid MFM\", \"No of DG MFM\", \"No of DI's\", \"No of DO's\",\"PV+ZE\",\"PV+DG\",\"PV+ZE\",\"PV+DG+ZE\",\"PV+RMS\",\"Contact Number\" )\nVALUES ( '{{payload.Site Name}}', '{{payload.Capacity}}', '{{payload.kW}}',  '{{payload.MW}}',  '{{payload.Loaction}}', '{{payload.No of Inverter}}', '{{payload.Inverter Make}}', '{{payload.No of MFM}}', '{{payload.No of Grid MFM}}', '{{payload.No of DG MFM}}', '{{payload.No of DI's}}', '{{payload.No of DO's}}', '{{payload.PV+ZE}}', '{{payload.PV+DG}}', '{{payload.PV+DG+ZE}}', '{{payload.PV+RMS}}', '{{payload.Contact Number}}')",
        "output": "str",
        "x": 720,
        "y": 760,
        "wires": [
            [
                "b0e1c8da1c3974db",
                "bb25ff4096a50710"
            ]
        ]
    },
    {
        "id": "dde0aa78062d3d3a",
        "type": "inject",
        "z": "0fd935399108894e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CREATE TABLE public.SDF_Test(  \"Site Name\" text , \"Capacity\" numeric, \"kW\" numeric , \"MW\" numeric , \"Plant Loaction\" text, \"No of Inverter\" numeric, \"Inverter Make\" text, \"No of MFM\" numeric, \"No of Solar MFM\" numeric, \"No of Grid MFM\" numeric, \"No of DG MFM\" numeric, \"No of DI's\" numeric, \"No of DO's\" numeric,\"PV+ZE\" text,\"PV+DG\" text,\"PV+DG+ZE\" text,\"PV+RMS\" text,\"Contact Number\" numeric ) WITH  (   OIDS=FALSE )",
        "payloadType": "str",
        "x": 1030,
        "y": 660,
        "wires": [
            [
                "bb25ff4096a50710"
            ]
        ]
    },
    {
        "id": "bb25ff4096a50710",
        "type": "postgres",
        "z": "0fd935399108894e",
        "postgresdb": "8a968a0493177dfc",
        "name": "",
        "output": false,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": false,
        "x": 1080,
        "y": 740,
        "wires": []
    },
    {
        "id": "e2f267c5036d881b",
        "type": "debug",
        "z": "0fd935399108894e",
        "name": "debug 1284",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "65ec6f51dd6607cf",
        "type": "inject",
        "z": "4504d6f21ce3ab7a",
        "name": "INJECT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f90a28879a4bd1ad",
        "type": "influxdb in",
        "z": "4504d6f21ce3ab7a",
        "influxdb": "c476b4ae71908d52",
        "name": "INV_SPIKE",
        "query": "SELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Iyyermalai' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_16MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_34MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka_50MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Kayathar' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Lomada' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Musiri' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Panchapatty' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Vemulapadu' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Bahera' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Maharashtra' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Neemuch' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 12MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab 20MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Punjab4MW' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Savakala' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'TTpet' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);\nSELECT last(\"value\"),p,b,d,f FROM \"v\" WHERE (\"p\" = 'Karnataka' AND \"d\" =~ /.*INV*./ AND \"f\" = 'EAE_DAY') AND time >= now() - 2d GROUP BY time(5m) fill(null);",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "b8db9497fe3422b0"
            ]
        ]
    },
    {
        "id": "b8db9497fe3422b0",
        "type": "function",
        "z": "4504d6f21ce3ab7a",
        "name": "",
        "func": "\n    for (var j = 0; j<msg.payload.length;j++)\n    for (var i = 0; i < msg.payload[j].length;i++)\n \n{\n var newMsg = {};\n newMsg.payload = {\n TIME:msg.payload[j][i].time,\n EAE_DAY:msg.payload[j][i].last,\n PLANT:msg.payload[j][i].p,\n BLOCK:msg.payload[j][i].b,\n DEVICE:msg.payload[j][i].d,\n FIELD:msg.payload[j][i].f\n \n }\n node.send(newMsg);\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "7e35a6294f93b9bd"
            ]
        ]
    },
    {
        "id": "7e35a6294f93b9bd",
        "type": "function",
        "z": "4504d6f21ce3ab7a",
        "name": "INV-Logic",
        "func": "\nvar TIME = msg.payload.TIME\nvar EAE_DAY = msg.payload.EAE_DAY\nvar PLANT=msg.payload.PLANT\nvar BLOCK =msg.payload.BLOCK\nvar DEVICE=msg.payload.DEVICE\nvar FIELD=msg.payload.FIELD\nif(EAE_DAY >= \"10.00\")\n{\n    var newMsg = {};\n    newMsg.payload =\n    {\n        TIME,\n       EAE_DAY,\n       PLANT,\n       BLOCK,\n       DEVICE,\n       FIELD,\n      Issue:\"EAE_DAY\"\n    }\n     node.send(newMsg); \n}\nreturn null;\n \n   \n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "ce94052e7a026a89"
            ]
        ]
    },
    {
        "id": "ce94052e7a026a89",
        "type": "function",
        "z": "4504d6f21ce3ab7a",
        "name": "tags and fields",
        "func": "msg.payload = [\n    {\n        measurement: \"SPIKES\",\n        fields: {\n            \n          EAE_DAY : msg.payload.EAE_DAY\n        },\n        tags:{\n            PLANT:msg.payload.PLANT,\n            BLOCK :msg.payload.BLOCK,\n            DEVICE:msg.payload.DEVICE,\n            FIELD:msg.payload.FIELD\n        \n        },\n        \n        timestamp:msg.payload.TIME\n        \n    },\n\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 340,
        "wires": [
            [
                "772b3245d23ed7cb"
            ]
        ]
    },
    {
        "id": "772b3245d23ed7cb",
        "type": "debug",
        "z": "4504d6f21ce3ab7a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 340,
        "wires": []
    },
    {
        "id": "2cf4e14b.8c8444",
        "type": "http in",
        "z": "5680b2bd775bca8a",
        "name": "",
        "url": "/csvdata",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 430,
        "y": 400,
        "wires": [
            [
                "938a5ef1.827d98"
            ]
        ]
    },
    {
        "id": "938a5ef1.827d98",
        "type": "csv",
        "z": "5680b2bd775bca8a",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "7a827aa5.a9e824"
            ]
        ]
    },
    {
        "id": "7a827aa5.a9e824",
        "type": "debug",
        "z": "5680b2bd775bca8a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 480,
        "wires": []
    },
    {
        "id": "c091b35f3d05f874",
        "type": "http request",
        "z": "9eeef4390ef47f7e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "/dev/get/solarlog",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 350,
        "y": 160,
        "wires": [
            [
                "c4b954e97fca6d98"
            ]
        ]
    },
    {
        "id": "c4b954e97fca6d98",
        "type": "debug",
        "z": "9eeef4390ef47f7e",
        "name": "debug 1279",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "b07f8fc28f6d4294",
        "type": "http in",
        "z": "9eeef4390ef47f7e",
        "name": "",
        "url": "/dev/post/solarlog",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 280,
        "wires": [
            [
                "c4b954e97fca6d98",
                "dbe435912bcc8bd8"
            ]
        ]
    },
    {
        "id": "30db3f0111ee5803",
        "type": "http response",
        "z": "9eeef4390ef47f7e",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 240,
        "wires": []
    },
    {
        "id": "dbe435912bcc8bd8",
        "type": "function",
        "z": "9eeef4390ef47f7e",
        "name": "function 442",
        "func": "// Decode Base64 and convert to CSV text\nmsg.payload = Buffer.from(msg.payload.split(\",\")[1], 'base64').toString('utf8');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "30db3f0111ee5803",
                "a7d239373a6549df",
                "e54a934ea1014074"
            ]
        ]
    },
    {
        "id": "a7d239373a6549df",
        "type": "debug",
        "z": "9eeef4390ef47f7e",
        "name": "debug 1280",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 280,
        "wires": []
    },
    {
        "id": "e54a934ea1014074",
        "type": "csv",
        "z": "9eeef4390ef47f7e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 390,
        "y": 420,
        "wires": [
            [
                "731204462633cb5f"
            ]
        ]
    },
    {
        "id": "a219b5f9774b5d91",
        "type": "debug",
        "z": "9eeef4390ef47f7e",
        "name": "debug 1281",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "731204462633cb5f",
        "type": "template",
        "z": "9eeef4390ef47f7e",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "INSERT INTO public.SR_Januar_2022_kein_SV_unter_30KW( \"S_No\" , \"PLANT_NAME\" , \"USER\" , \"DATA_LOGGER\" , \"SERIAL_NO\" , \"PLANT_STATUS\" )\nVALUES ( '{{payload.S_No}}', '{{payload.Plant_Name}}', '{{payload.User}}',  '{{payload.Data_logger}}',  '{{payload.Serial_Number}}', '{{payload.Plant_Status}}')",
        "output": "str",
        "x": 540,
        "y": 560,
        "wires": [
            [
                "a219b5f9774b5d91",
                "42c7112775dfbe2c"
            ]
        ]
    },
    {
        "id": "42c7112775dfbe2c",
        "type": "postgres",
        "z": "9eeef4390ef47f7e",
        "postgresdb": "8a968a0493177dfc",
        "name": "",
        "output": false,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": false,
        "x": 920,
        "y": 680,
        "wires": []
    },
    {
        "id": "e724b9ab1c216342",
        "type": "inject",
        "z": "9eeef4390ef47f7e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CREATE TABLE public.SDF_Test(  \"Site Name\" text , \"Capacity\" numeric, \"kW\" numeric , \"MW\" numeric , \"Plant Loaction\" text, \"No of Inverter\" numeric, \"Inverter Make\" text, \"No of MFM\" numeric, \"No of Solar MFM\" numeric, \"No of Grid MFM\" numeric, \"No of DG MFM\" numeric, \"No of DI's\" numeric, \"No of DO's\" numeric,\"PV+ZE\" text,\"PV+DG\" text,\"PV+DG+ZE\" text,\"PV+RMS\" text,\"Contact Number\" numeric ) WITH  (   OIDS=FALSE )",
        "payloadType": "str",
        "x": 930,
        "y": 500,
        "wires": [
            [
                "42c7112775dfbe2c"
            ]
        ]
    },
    {
        "id": "fe84d071.8b8ef8",
        "type": "http in",
        "z": "feca275c6d5c7579",
        "name": "/upload",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 370,
        "y": 340,
        "wires": [
            [
                "1a5c1a8d.3cc13a"
            ]
        ]
    },
    {
        "id": "1a5c1a8d.3cc13a",
        "type": "file",
        "z": "feca275c6d5c7579",
        "name": "",
        "filename": "/path/to/your/desktop/uploaded.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 600,
        "y": 340,
        "wires": [
            [
                "b4766a4d.1696c8",
                "c4fa34ef84930bfe"
            ]
        ]
    },
    {
        "id": "b4766a4d.1696c8",
        "type": "http response",
        "z": "feca275c6d5c7579",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 340,
        "wires": []
    },
    {
        "id": "c4fa34ef84930bfe",
        "type": "debug",
        "z": "feca275c6d5c7579",
        "name": "debug 1298",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 460,
        "wires": []
    },
    {
        "id": "2b447f6c2e9ab79e",
        "type": "inject",
        "z": "1d2e14befd69b6a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "f72c0a6541e598db"
            ]
        ]
    },
    {
        "id": "f72c0a6541e598db",
        "type": "file in",
        "z": "1d2e14befd69b6a2",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 520,
        "y": 280,
        "wires": [
            [
                "b0540ded81e86f37"
            ]
        ]
    },
    {
        "id": "b0540ded81e86f37",
        "type": "debug",
        "z": "1d2e14befd69b6a2",
        "name": "debug 1301",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 280,
        "wires": []
    },
    {
        "id": "5bb92785c1f34a62",
        "type": "inject",
        "z": "c608052aa2c1b2b3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "26a9920b66fa4892",
        "type": "file in",
        "z": "c608052aa2c1b2b3",
        "name": "",
        "filename": "D:\\iPLON_Tamil\\test.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "529c60df555d8dea"
            ]
        ]
    },
    {
        "id": "529c60df555d8dea",
        "type": "debug",
        "z": "c608052aa2c1b2b3",
        "name": "debug 1302",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 360,
        "wires": []
    },
    {
        "id": "3a1ea67bff1bf636",
        "type": "function",
        "z": "c608052aa2c1b2b3",
        "name": "function 445",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e13d796a954d1e49",
        "type": "template",
        "z": "c608052aa2c1b2b3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 1000,
        "y": 260,
        "wires": [
            []
        ]
    }
]